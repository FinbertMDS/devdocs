{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Wellcome to Developer Documentation page.","title":"Overview"},{"location":"#overview","text":"Wellcome to Developer Documentation page.","title":"Overview"},{"location":"agile/","text":"Overview \u00b6 This is our developer docs about Agile. Our docs includes: Principle Target - Planning Success Story","title":"Overview"},{"location":"agile/#overview","text":"This is our developer docs about Agile. Our docs includes: Principle Target - Planning Success Story","title":"Overview"},{"location":"cplus/","text":"Overview \u00b6 This is our developer docs about C#.","title":"Overview"},{"location":"cplus/#overview","text":"This is our developer docs about C#.","title":"Overview"},{"location":"design_pattern/","text":"Overview \u00b6 This is our developer docs about Design Pattern Observer","title":"Overview"},{"location":"design_pattern/#overview","text":"This is our developer docs about Design Pattern Observer","title":"Overview"},{"location":"docker/","text":"Overview \u00b6 This is our developer docs about Docker. Our docs includes: Install Get started Develop with Docker Sample use Docker Documents Note","title":"Overview"},{"location":"docker/#overview","text":"This is our developer docs about Docker. Our docs includes: Install Get started Develop with Docker Sample use Docker Documents Note","title":"Overview"},{"location":"git/","text":"Overview \u00b6 This is our developer docs about Git. Our docs includes: Git Internals Note","title":"Overview"},{"location":"git/#overview","text":"This is our developer docs about Git. Our docs includes: Git Internals Note","title":"Overview"},{"location":"java/","text":"Overview \u00b6 This is our developer docs about Java.","title":"Overview"},{"location":"java/#overview","text":"This is our developer docs about Java.","title":"Overview"},{"location":"jenkins/","text":"Overview \u00b6 This is our developer docs about Jenkins. Our docs inclues: Install Documents Sample Note","title":"Overview"},{"location":"jenkins/#overview","text":"This is our developer docs about Jenkins. Our docs inclues: Install Documents Sample Note","title":"Overview"},{"location":"magento/","text":"Overview \u00b6 This is our developer docs about Magento. Our docs includes: Install Framework Module Build Partial caching Full page caching Command line Magento Functional Testing Framework Functional Testing Install extension Magento by composer Magento 2.3 - PWA Studio Preparation notes for Magento 2 Certified Professional Developer exam Note about Magento","title":"Overview"},{"location":"magento/#overview","text":"This is our developer docs about Magento. Our docs includes: Install Framework Module Build Partial caching Full page caching Command line Magento Functional Testing Framework Functional Testing Install extension Magento by composer Magento 2.3 - PWA Studio Preparation notes for Magento 2 Certified Professional Developer exam Note about Magento","title":"Overview"},{"location":"microservices/","text":"Overview \u00b6 This is our developer docs about Microservices. Our docs inclues: Sample Note","title":"Overview"},{"location":"microservices/#overview","text":"This is our developer docs about Microservices. Our docs inclues: Sample Note","title":"Overview"},{"location":"mkdocs/","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Install \u00b6 sudo apt install python sudo apt install python-pip -y pip install --upgrade pip wget https://bootstrap.pypa.io/get-pip.py python get-pip.py pip install mkdocs Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Themes \u00b6 https://squidfunk.github.io/mkdocs-material/","title":"Mkdocs"},{"location":"mkdocs/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"mkdocs/#install","text":"sudo apt install python sudo apt install python-pip -y pip install --upgrade pip wget https://bootstrap.pypa.io/get-pip.py python get-pip.py pip install mkdocs","title":"Install"},{"location":"mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"mkdocs/#themes","text":"https://squidfunk.github.io/mkdocs-material/","title":"Themes"},{"location":"nginx/","text":"Overview \u00b6 This is our developer docs about Nginx. Our docs includes: Web Server Reverse proxy","title":"Overview"},{"location":"nginx/#overview","text":"This is our developer docs about Nginx. Our docs includes: Web Server Reverse proxy","title":"Overview"},{"location":"php/","text":"Overview \u00b6 This is our developer docs about PHP.","title":"Overview"},{"location":"php/#overview","text":"This is our developer docs about PHP.","title":"Overview"},{"location":"programming_language/","text":"Overview \u00b6 This is all programming languages which I had been used.","title":"Overview"},{"location":"programming_language/#overview","text":"This is all programming languages which I had been used.","title":"Overview"},{"location":"python/","text":"Overview \u00b6 This is our developer docs about Python.","title":"Overview"},{"location":"python/#overview","text":"This is our developer docs about Python.","title":"Overview"},{"location":"react_native/","text":"Overview \u00b6 This is our developer docs about React native. Our docs includes: Note about React native","title":"Overview"},{"location":"react_native/#overview","text":"This is our developer docs about React native. Our docs includes: Note about React native","title":"Overview"},{"location":"reactjs/","text":"Overview \u00b6 This is our developer docs about React.","title":"Overview"},{"location":"reactjs/#overview","text":"This is our developer docs about React.","title":"Overview"},{"location":"server/","text":"Overview \u00b6 This is our developer docs about Server. Our docs includes: Domain SSL SSH Note","title":"Overview"},{"location":"server/#overview","text":"This is our developer docs about Server. Our docs includes: Domain SSL SSH Note","title":"Overview"},{"location":"ubuntu/","text":"Overview \u00b6 This is our developer docs about Ubuntu. Our docs includes: Install software Command line Bash scripts SSH SSL Note Document Linux","title":"Overview"},{"location":"ubuntu/#overview","text":"This is our developer docs about Ubuntu. Our docs includes: Install software Command line Bash scripts SSH SSL Note Document Linux","title":"Overview"},{"location":"agile/planning/","text":"Overview \u00b6 This is our developer docs about Target - Planning Define Target \u00b6 A target need to be satisfied SMART S \u2013 Specific : C\u1ee5 th\u1ec3, d\u1ec5 hi\u1ec3u. M \u2013 Measurable : \u0110o l\u01b0\u1eddng \u0111\u01b0\u1ee3c A \u2013 Attainable : C\u00f3 th\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c R \u2013 Relevant : Th\u1ef1c t\u1ebf T \u2013 Time-Bound : Th\u1eddi gian ho\u00e0n th\u00e0nh http://ivyprep.edu.vn/study/xac-dinh-muc-tieu-theo-nguyen-tac-smart/","title":"Planning"},{"location":"agile/planning/#overview","text":"This is our developer docs about Target - Planning","title":"Overview"},{"location":"agile/planning/#define-target","text":"A target need to be satisfied SMART S \u2013 Specific : C\u1ee5 th\u1ec3, d\u1ec5 hi\u1ec3u. M \u2013 Measurable : \u0110o l\u01b0\u1eddng \u0111\u01b0\u1ee3c A \u2013 Attainable : C\u00f3 th\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c R \u2013 Relevant : Th\u1ef1c t\u1ebf T \u2013 Time-Bound : Th\u1eddi gian ho\u00e0n th\u00e0nh http://ivyprep.edu.vn/study/xac-dinh-muc-tieu-theo-nguyen-tac-smart/","title":"Define Target"},{"location":"agile/principle/","text":"Overview \u00b6 This is our developer docs about 12 Principle in Agile Th\u1ecfa m\u00e3n y\u00eau c\u1ea7u c\u1ee7a kh\u00e1ch h\u00e0ng th\u00f4ng qua vi\u1ec7c giao h\u00e0ng s\u1edbm v\u00e0 li\u00ean t\u1ee5c Giao ph\u1ea7n m\u1ec1m ch\u1ea1y \u0111\u01b0\u1ee3c cho kh\u00e1ch h\u00e0ng m\u1ed9t c\u00e1ch th\u01b0\u1eddng xuy\u00ean (giao h\u00e0ng tu\u1ea7n h\u01a1n l\u00e0 h\u00e0ng th\u00e1ng) Ch\u00e0o \u0111\u00f3n vi\u1ec7c thay \u0111\u1ed5i y\u00eau c\u1ea7u, th\u1eadm ch\u00ed l\u00e0 nh\u1eefng thay \u0111\u1ed5i y\u00eau c\u1ea7u mu\u1ed9n Nh\u00e0 kinh doanh v\u00e0 k\u1ef9 s\u01b0 l\u1eadp tr\u00ecnh ph\u1ea3i l\u00e0m vi\u1ec7c c\u00f9ng nhau h\u00e0ng ng\u00e0y trong su\u1ed1t d\u1ef1 \u00e1n C\u00e1c d\u1ef1 \u00e1n \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng xung quanh nh\u1eefng c\u00e1 nh\u00e2n c\u00f3 \u0111\u1ed9ng l\u1ef1c. Cung c\u1ea5p cho h\u1ecd m\u00f4i tr\u01b0\u1eddng v\u00e0 s\u1ef1 h\u1ed7 tr\u1ee3 c\u1ea7n thi\u1ebft, v\u00e0 tin t\u01b0\u1edfng h\u1ecd \u0111\u1ec3 ho\u00e0n th\u00e0nh c\u00f4ng vi\u1ec7c Trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp m\u1eb7t \u0111\u1ed1i m\u1eb7t l\u00e0 ph\u01b0\u01a1ng ph\u00e1p hi\u1ec7u qu\u1ea3 nh\u1ea5t \u0111\u1ec3 truy\u1ec1n \u0111\u1ea1t th\u00f4ng tin Ph\u1ea7n m\u1ec1m ch\u1ea1y \u0111\u01b0\u1ee3c l\u00e0 th\u01b0\u1edbc \u0111o ch\u00ednh c\u1ee7a ti\u1ebfn \u0111\u1ed9 Ph\u00e1t tri\u1ec3n b\u1ec1n v\u1eefng v\u00e0 duy tr\u00ec \u0111\u01b0\u1ee3c nh\u1ecbp \u0111\u1ed9 ph\u00e1t tri\u1ec3n li\u00ean t\u1ee5c Li\u00ean t\u1ee5c quan t\u00e2m \u0111\u1ebfn k\u0129 thu\u1eadt v\u00e0 thi\u1ebft k\u1ebf \u0111\u1ec3 c\u1ea3i ti\u1ebfn s\u1ef1 linh ho\u1ea1t S\u1ef1 \u0111\u01a1n gi\u1ea3n l\u00e0 c\u1ea7n thi\u1ebft \u2013 ngh\u1ec7 thu\u1eadt t\u1ed1i \u0111a h\u00f3a l\u01b0\u1ee3ng c\u00f4ng vi\u1ec7c ch\u01b0a ho\u00e0n th\u00e0nh Nh\u00f3m t\u1ef1 t\u1ed5 ch\u1ee9c Th\u00edch \u1ee9ng th\u01b0\u1eddng xuy\u00ean v\u1edbi s\u1ef1 thay \u0111\u1ed5i","title":"Principle"},{"location":"agile/principle/#overview","text":"This is our developer docs about 12 Principle in Agile Th\u1ecfa m\u00e3n y\u00eau c\u1ea7u c\u1ee7a kh\u00e1ch h\u00e0ng th\u00f4ng qua vi\u1ec7c giao h\u00e0ng s\u1edbm v\u00e0 li\u00ean t\u1ee5c Giao ph\u1ea7n m\u1ec1m ch\u1ea1y \u0111\u01b0\u1ee3c cho kh\u00e1ch h\u00e0ng m\u1ed9t c\u00e1ch th\u01b0\u1eddng xuy\u00ean (giao h\u00e0ng tu\u1ea7n h\u01a1n l\u00e0 h\u00e0ng th\u00e1ng) Ch\u00e0o \u0111\u00f3n vi\u1ec7c thay \u0111\u1ed5i y\u00eau c\u1ea7u, th\u1eadm ch\u00ed l\u00e0 nh\u1eefng thay \u0111\u1ed5i y\u00eau c\u1ea7u mu\u1ed9n Nh\u00e0 kinh doanh v\u00e0 k\u1ef9 s\u01b0 l\u1eadp tr\u00ecnh ph\u1ea3i l\u00e0m vi\u1ec7c c\u00f9ng nhau h\u00e0ng ng\u00e0y trong su\u1ed1t d\u1ef1 \u00e1n C\u00e1c d\u1ef1 \u00e1n \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng xung quanh nh\u1eefng c\u00e1 nh\u00e2n c\u00f3 \u0111\u1ed9ng l\u1ef1c. Cung c\u1ea5p cho h\u1ecd m\u00f4i tr\u01b0\u1eddng v\u00e0 s\u1ef1 h\u1ed7 tr\u1ee3 c\u1ea7n thi\u1ebft, v\u00e0 tin t\u01b0\u1edfng h\u1ecd \u0111\u1ec3 ho\u00e0n th\u00e0nh c\u00f4ng vi\u1ec7c Trao \u0111\u1ed5i tr\u1ef1c ti\u1ebfp m\u1eb7t \u0111\u1ed1i m\u1eb7t l\u00e0 ph\u01b0\u01a1ng ph\u00e1p hi\u1ec7u qu\u1ea3 nh\u1ea5t \u0111\u1ec3 truy\u1ec1n \u0111\u1ea1t th\u00f4ng tin Ph\u1ea7n m\u1ec1m ch\u1ea1y \u0111\u01b0\u1ee3c l\u00e0 th\u01b0\u1edbc \u0111o ch\u00ednh c\u1ee7a ti\u1ebfn \u0111\u1ed9 Ph\u00e1t tri\u1ec3n b\u1ec1n v\u1eefng v\u00e0 duy tr\u00ec \u0111\u01b0\u1ee3c nh\u1ecbp \u0111\u1ed9 ph\u00e1t tri\u1ec3n li\u00ean t\u1ee5c Li\u00ean t\u1ee5c quan t\u00e2m \u0111\u1ebfn k\u0129 thu\u1eadt v\u00e0 thi\u1ebft k\u1ebf \u0111\u1ec3 c\u1ea3i ti\u1ebfn s\u1ef1 linh ho\u1ea1t S\u1ef1 \u0111\u01a1n gi\u1ea3n l\u00e0 c\u1ea7n thi\u1ebft \u2013 ngh\u1ec7 thu\u1eadt t\u1ed1i \u0111a h\u00f3a l\u01b0\u1ee3ng c\u00f4ng vi\u1ec7c ch\u01b0a ho\u00e0n th\u00e0nh Nh\u00f3m t\u1ef1 t\u1ed5 ch\u1ee9c Th\u00edch \u1ee9ng th\u01b0\u1eddng xuy\u00ean v\u1edbi s\u1ef1 thay \u0111\u1ed5i","title":"Overview"},{"location":"agile/success_story/","text":"Overview \u00b6 This is our developer docs about Use Agile at some company Spotify https://www.youtube.com/watch?v=4GK1NDTWbkY&start_radio=1&list=","title":"Success Story"},{"location":"agile/success_story/#overview","text":"This is our developer docs about Use Agile at some company Spotify https://www.youtube.com/watch?v=4GK1NDTWbkY&start_radio=1&list=","title":"Overview"},{"location":"design_pattern/observer/","text":"Overview \u00b6 This is our developer docs about Observer Pattern In RxJS: https://medium.com/@benlesh/on-the-subject-of-subjects-in-rxjs-2b08b7198b93","title":"Observer"},{"location":"design_pattern/observer/#overview","text":"This is our developer docs about Observer Pattern In RxJS: https://medium.com/@benlesh/on-the-subject-of-subjects-in-rxjs-2b08b7198b93","title":"Overview"},{"location":"docker/develop/","text":"Overview \u00b6 This is our developer docs about Docker. Our docs includes: Docker development best practices \u00b6 How to keep your images small Start with an appropriate base image Use multistage builds If you have multiple images with a lot in common, consider creating your own https://docs.docker.com/engine/userguide/eng-image/baseimages/ with the shared components, and basing your unique images on that Where and how to persist application data Store data using volumes. Use swarm services when possible Use CI/CD for testing and deployment Best practices for writing Dockerfiles \u00b6 Create ephemeral containers By \"ephemeral\" we mean that the container can be stopped and destroyed, then rebuilt and replaced with an absolute minimum set up and configuration. - Understand build context - Pipe Dockerfile through stdin Docker 17.05 and higher (remote build-context) docker build -t foo https://github.com/thajeztah/pgadmin4-docker.git -f- <<EOF FROM busybox COPY LICENSE config_local.py /usr/local/lib/python2.7/site-packages/pgadmin4/ EOF - Exclude with .dockerignore - Use multi-stage builds A Dockerfile for a Go application could look like: FROM golang:1.9.2-alpine3.6 AS build # Install tools required for project # Run `docker build --no-cache .` to update dependencies RUN apk add --no-cache git RUN go get github.com/golang/dep/cmd/dep # List project dependencies with Gopkg.toml and Gopkg.lock # These layers are only re-built when Gopkg files are updated COPY Gopkg.lock Gopkg.toml /go/src/project/ WORKDIR /go/src/project/ # Install library dependencies RUN dep ensure -vendor-only # Copy the entire project and build it # This layer is rebuilt when a file changes in the project directory COPY . /go/src/project/ RUN go build -o /bin/project # This results in a single layer image FROM scratch COPY --from=build /bin/project /bin/project ENTRYPOINT [\"/bin/project\"] CMD [\"--help\"] - Don\u2019t install unnecessary packages - Decouple applications Each container should have only one concern. Decoupling applications into multiple containers makes it easier to scale horizontally and reuse containers. Use your best judgment to keep containers as clean and modular as possible. If containers depend on each other, you can use Docker container networks to ensure that these containers can communicate. Minimize the number of layers Sort multi-line arguments Adding a space before a backslash () add the end of line to sorting multi-line arguments. - Leverage build cache If you do not want to use the cache at all, you can use the --no-cache=true option on the docker build command. Dockerfile instructions \u00b6 FROM Whenever possible, use current official repositories as the basis for your images. We recommend the Alpine image as it is tightly controlled and small in size (currently under 5 MB), while still being a full Linux distribution. LABEL RUN Split long or complex RUN statements on multiple lines separated with backslashes to make your Dockerfile more readable, understandable, and maintainable. APT-GET Using RUN apt-get update && apt-get install -y ensures your Dockerfile installs the latest package versions with no further coding or manual intervention. RUN apt-get update && apt-get install -y \\ aufs-tools \\ automake \\ build-essential \\ curl \\ dpkg-sig \\ libcap-dev \\ libsqlite3-dev \\ mercurial \\ reprepro \\ ruby1.9.1 \\ ruby1.9.1-dev \\ s3cmd=1.1.* \\ && rm -rf /var/lib/apt/lists/* - USING PIPES Some RUN commands depend on the ability to pipe the output of one command into another, using the pipe character (|) RUN wget -O - https://some.site | wc -l > /number CMD The CMD instruction should be used to run the software contained by your image, along with any arguments. CMD should almost always be used in the form of CMD [\u201cexecutable\u201d, \u201cparam1\u201d, \u201cparam2\u201d\u2026]. EXPOSE The EXPOSE instruction indicates the ports on which a container listens for connections. Consequently, you should use the common, traditional port for your application. ENV The ENV instruction is also useful for providing required environment variables specific to services you wish to containerize. ADD or COPY COPY only supports the basic copying of local files into the container, while ADD has some features (like local-only tar extraction and remote URL support) that are not immediately obvious. If you have multiple Dockerfile steps that use different files from your context, COPY them individually, rather than all at once. ENTRYPOINT The best use for ENTRYPOINT is to set the image\u2019s main command, allowing that image to be run as though it was that command (and then use CMD as the default flags). VOLUME The VOLUME instruction should be used to expose any database storage area, configuration storage, or files/folders created by your docker container. You are strongly encouraged to use VOLUME for any mutable and/or user-serviceable parts of your image. USER If a service can run without privileges, use USER to change to a non-root user. WORKDIR ONBUILD","title":"Develop with Docker"},{"location":"docker/develop/#overview","text":"This is our developer docs about Docker. Our docs includes:","title":"Overview"},{"location":"docker/develop/#docker-development-best-practices","text":"How to keep your images small Start with an appropriate base image Use multistage builds If you have multiple images with a lot in common, consider creating your own https://docs.docker.com/engine/userguide/eng-image/baseimages/ with the shared components, and basing your unique images on that Where and how to persist application data Store data using volumes. Use swarm services when possible Use CI/CD for testing and deployment","title":"Docker development best practices"},{"location":"docker/develop/#best-practices-for-writing-dockerfiles","text":"Create ephemeral containers By \"ephemeral\" we mean that the container can be stopped and destroyed, then rebuilt and replaced with an absolute minimum set up and configuration. - Understand build context - Pipe Dockerfile through stdin Docker 17.05 and higher (remote build-context) docker build -t foo https://github.com/thajeztah/pgadmin4-docker.git -f- <<EOF FROM busybox COPY LICENSE config_local.py /usr/local/lib/python2.7/site-packages/pgadmin4/ EOF - Exclude with .dockerignore - Use multi-stage builds A Dockerfile for a Go application could look like: FROM golang:1.9.2-alpine3.6 AS build # Install tools required for project # Run `docker build --no-cache .` to update dependencies RUN apk add --no-cache git RUN go get github.com/golang/dep/cmd/dep # List project dependencies with Gopkg.toml and Gopkg.lock # These layers are only re-built when Gopkg files are updated COPY Gopkg.lock Gopkg.toml /go/src/project/ WORKDIR /go/src/project/ # Install library dependencies RUN dep ensure -vendor-only # Copy the entire project and build it # This layer is rebuilt when a file changes in the project directory COPY . /go/src/project/ RUN go build -o /bin/project # This results in a single layer image FROM scratch COPY --from=build /bin/project /bin/project ENTRYPOINT [\"/bin/project\"] CMD [\"--help\"] - Don\u2019t install unnecessary packages - Decouple applications Each container should have only one concern. Decoupling applications into multiple containers makes it easier to scale horizontally and reuse containers. Use your best judgment to keep containers as clean and modular as possible. If containers depend on each other, you can use Docker container networks to ensure that these containers can communicate. Minimize the number of layers Sort multi-line arguments Adding a space before a backslash () add the end of line to sorting multi-line arguments. - Leverage build cache If you do not want to use the cache at all, you can use the --no-cache=true option on the docker build command.","title":"Best practices for writing Dockerfiles"},{"location":"docker/develop/#dockerfile-instructions","text":"FROM Whenever possible, use current official repositories as the basis for your images. We recommend the Alpine image as it is tightly controlled and small in size (currently under 5 MB), while still being a full Linux distribution. LABEL RUN Split long or complex RUN statements on multiple lines separated with backslashes to make your Dockerfile more readable, understandable, and maintainable. APT-GET Using RUN apt-get update && apt-get install -y ensures your Dockerfile installs the latest package versions with no further coding or manual intervention. RUN apt-get update && apt-get install -y \\ aufs-tools \\ automake \\ build-essential \\ curl \\ dpkg-sig \\ libcap-dev \\ libsqlite3-dev \\ mercurial \\ reprepro \\ ruby1.9.1 \\ ruby1.9.1-dev \\ s3cmd=1.1.* \\ && rm -rf /var/lib/apt/lists/* - USING PIPES Some RUN commands depend on the ability to pipe the output of one command into another, using the pipe character (|) RUN wget -O - https://some.site | wc -l > /number CMD The CMD instruction should be used to run the software contained by your image, along with any arguments. CMD should almost always be used in the form of CMD [\u201cexecutable\u201d, \u201cparam1\u201d, \u201cparam2\u201d\u2026]. EXPOSE The EXPOSE instruction indicates the ports on which a container listens for connections. Consequently, you should use the common, traditional port for your application. ENV The ENV instruction is also useful for providing required environment variables specific to services you wish to containerize. ADD or COPY COPY only supports the basic copying of local files into the container, while ADD has some features (like local-only tar extraction and remote URL support) that are not immediately obvious. If you have multiple Dockerfile steps that use different files from your context, COPY them individually, rather than all at once. ENTRYPOINT The best use for ENTRYPOINT is to set the image\u2019s main command, allowing that image to be run as though it was that command (and then use CMD as the default flags). VOLUME The VOLUME instruction should be used to expose any database storage area, configuration storage, or files/folders created by your docker container. You are strongly encouraged to use VOLUME for any mutable and/or user-serviceable parts of your image. USER If a service can run without privileges, use USER to change to a non-root user. WORKDIR ONBUILD","title":"Dockerfile instructions"},{"location":"docker/documents/","text":"Overview \u00b6 This is our developer docs about Documents about Docker https://kipalog.com/posts/He-sinh-thai-Docker https://github.com/cuongtransc/docker-training https://github.com/wsargent/docker-cheat-sheet","title":"Documents"},{"location":"docker/documents/#overview","text":"This is our developer docs about Documents about Docker https://kipalog.com/posts/He-sinh-thai-Docker https://github.com/cuongtransc/docker-training https://github.com/wsargent/docker-cheat-sheet","title":"Overview"},{"location":"docker/get_started/","text":"Overview \u00b6 This is our developer docs about Docker. Our docs includes: Part 1: Orientation and setup \u00b6 Images and containers Install Docker Part 2: Containers \u00b6 Define a container with Dockerfile Build the app Run the app Share your image Part 3: Services \u00b6 About services docker-compose.yml file Part 4: Swarms \u00b6 Understanding Swarm clusters Set up your swarm Deploy your app on the swarm cluster Part 5: Stacks \u00b6 Add a new service and redeploy Persist the data Part 6: Deploy your app \u00b6","title":"Get started"},{"location":"docker/get_started/#overview","text":"This is our developer docs about Docker. Our docs includes:","title":"Overview"},{"location":"docker/get_started/#part-1-orientation-and-setup","text":"Images and containers Install Docker","title":"Part 1: Orientation and setup"},{"location":"docker/get_started/#part-2-containers","text":"Define a container with Dockerfile Build the app Run the app Share your image","title":"Part 2: Containers"},{"location":"docker/get_started/#part-3-services","text":"About services docker-compose.yml file","title":"Part 3: Services"},{"location":"docker/get_started/#part-4-swarms","text":"Understanding Swarm clusters Set up your swarm Deploy your app on the swarm cluster","title":"Part 4: Swarms"},{"location":"docker/get_started/#part-5-stacks","text":"Add a new service and redeploy Persist the data","title":"Part 5: Stacks"},{"location":"docker/get_started/#part-6-deploy-your-app","text":"","title":"Part 6: Deploy your app"},{"location":"docker/install/","text":"Overview \u00b6 This is our developer docs about How to install Docker Install Docker in Ubuntu \u00b6 Update the apt package index: sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common -y curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) \\ stable\" sudo apt-get update sudo apt-get install docker-ce -y Use Docker without Sudo sudo gpasswd -a $USER docker newgrp docker Install Docker compose in Ubuntu \u00b6 sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.1/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose","title":"Install"},{"location":"docker/install/#overview","text":"This is our developer docs about How to install Docker","title":"Overview"},{"location":"docker/install/#install-docker-in-ubuntu","text":"Update the apt package index: sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common -y curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) \\ stable\" sudo apt-get update sudo apt-get install docker-ce -y Use Docker without Sudo sudo gpasswd -a $USER docker newgrp docker","title":"Install Docker in Ubuntu"},{"location":"docker/install/#install-docker-compose-in-ubuntu","text":"sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.1/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose","title":"Install Docker compose in Ubuntu"},{"location":"docker/note/","text":"Note about Docker \u00b6 On Docker container, if you want install module: Ex: unzip apt update && apt install unzip How to use Docker without sudo on Ubuntu Next we need to add current user to the group. sudo gpasswd -a $USER docker Lastly we need to reload shell in order to have new group settings applied. newgrp docker https://eggclub.org/thay-doi-owner-cua-mount-volume-khi-dev-voi-docker/","title":"Note"},{"location":"docker/note/#note-about-docker","text":"On Docker container, if you want install module: Ex: unzip apt update && apt install unzip How to use Docker without sudo on Ubuntu Next we need to add current user to the group. sudo gpasswd -a $USER docker Lastly we need to reload shell in order to have new group settings applied. newgrp docker https://eggclub.org/thay-doi-owner-cua-mount-volume-khi-dev-voi-docker/","title":"Note about Docker"},{"location":"docker/sample/","text":"Sample \u00b6 This is our developer docs about Sample use Docker Magento 1 \u00b6 Docker Magento 1 Docker compose with: Magento 1 + PHP 5.6 + Apache2 + MariaDb 10.0 + PhpMyAdmin Magento 2 \u00b6 Docker Magento 2 Docker compose with: Magento 2 + PHP 7.1 + Apache2 + MariaDb + PhpMyAdmin + Composer Docker Magento multiple version Docker compose for multiple version magento which you config in file .env : Magento 1.x + PHP 5.6 + Apache2 + MariaDb + Phpmyadmin Magento 2.1 + PHP 7.0 + Apache2 + MariaDb + Phpmyadmin Magento 2.2 + PHP 7.1 + Apache2 + MariaDb + Phpmyadmin Magento 2.3 + PHP 7.2 + Apache2 + MariaDb + Phpmyadmin Docker Hub for database of version magento All version magento has database in Docker Hub 2.1.3,2.1.15,2.1.16,2.2.1,2.2.5,2.2.6,2.2.7,2.3.0 Mkdocs \u00b6 Docker Mkdocs Docker compose with: Alpine Education Social Network (ESN) \u00b6 Docker ESN Docker: Docker file for Service Docker file for Web App","title":"Sample"},{"location":"docker/sample/#sample","text":"This is our developer docs about Sample use Docker","title":"Sample"},{"location":"docker/sample/#magento-1","text":"Docker Magento 1 Docker compose with: Magento 1 + PHP 5.6 + Apache2 + MariaDb 10.0 + PhpMyAdmin","title":"Magento 1"},{"location":"docker/sample/#magento-2","text":"Docker Magento 2 Docker compose with: Magento 2 + PHP 7.1 + Apache2 + MariaDb + PhpMyAdmin + Composer Docker Magento multiple version Docker compose for multiple version magento which you config in file .env : Magento 1.x + PHP 5.6 + Apache2 + MariaDb + Phpmyadmin Magento 2.1 + PHP 7.0 + Apache2 + MariaDb + Phpmyadmin Magento 2.2 + PHP 7.1 + Apache2 + MariaDb + Phpmyadmin Magento 2.3 + PHP 7.2 + Apache2 + MariaDb + Phpmyadmin Docker Hub for database of version magento All version magento has database in Docker Hub 2.1.3,2.1.15,2.1.16,2.2.1,2.2.5,2.2.6,2.2.7,2.3.0","title":"Magento 2"},{"location":"docker/sample/#mkdocs","text":"Docker Mkdocs Docker compose with: Alpine","title":"Mkdocs"},{"location":"docker/sample/#education-social-network-esn","text":"Docker ESN Docker: Docker file for Service Docker file for Web App","title":"Education Social Network (ESN)"},{"location":"git/internals/","text":"Overview \u00b6 This is our developer docs about Git Internals Git Objects \u00b6 Documents: https://hackernoon.com/https-medium-com-zspajich-understanding-git-data-model-95eb16cc99f5 https://git-scm.com/book/id/v2/Git-Internals-Git-Objects Packfiles \u00b6 Documents: https://git-scm.com/book/id/v2/Git-Internals-Packfiles","title":"Git Internals"},{"location":"git/internals/#overview","text":"This is our developer docs about Git Internals","title":"Overview"},{"location":"git/internals/#git-objects","text":"Documents: https://hackernoon.com/https-medium-com-zspajich-understanding-git-data-model-95eb16cc99f5 https://git-scm.com/book/id/v2/Git-Internals-Git-Objects","title":"Git Objects"},{"location":"git/internals/#packfiles","text":"Documents: https://git-scm.com/book/id/v2/Git-Internals-Packfiles","title":"Packfiles"},{"location":"git/note/","text":"Note about Git \u00b6 Github \u00b6 Use Github Personal access token \u00b6 Create and use token Use token to commit: repo-url=https://[username]:[token]@github.com/[username]/[repository_name].git git remote set-url origin [ repo-url ] Note: If token exist in any file when commit, GitHub can observe, remove token and then notice to email that \"This token removed\". Should keep token in env and add it to remote.","title":"Note"},{"location":"git/note/#note-about-git","text":"","title":"Note about Git"},{"location":"git/note/#github","text":"","title":"Github"},{"location":"git/note/#use-github-personal-access-token","text":"Create and use token Use token to commit: repo-url=https://[username]:[token]@github.com/[username]/[repository_name].git git remote set-url origin [ repo-url ] Note: If token exist in any file when commit, GitHub can observe, remove token and then notice to email that \"This token removed\". Should keep token in env and add it to remote.","title":"Use Github Personal access token"},{"location":"jenkins/documents/","text":"Overview \u00b6 This is our developer docs about Documents about Jenkins Jenkins Docs: https://jenkins.io/doc/pipeline/tour/tests-and-artifacts/ https://jenkins.io/doc/pipeline/tour/post/ https://jenkins.io/doc/pipeline/tour/deployment/ https://jenkins.io/doc/tutorials/create-a-pipeline-in-blue-ocean/ https://jenkins.io/doc/tutorials/build-a-multibranch-pipeline-project/","title":"Documents"},{"location":"jenkins/documents/#overview","text":"This is our developer docs about Documents about Jenkins Jenkins Docs: https://jenkins.io/doc/pipeline/tour/tests-and-artifacts/ https://jenkins.io/doc/pipeline/tour/post/ https://jenkins.io/doc/pipeline/tour/deployment/ https://jenkins.io/doc/tutorials/create-a-pipeline-in-blue-ocean/ https://jenkins.io/doc/tutorials/build-a-multibranch-pipeline-project/","title":"Overview"},{"location":"jenkins/install/","text":"Overview \u00b6 This is our developer docs about How to install Jenkins Install Jenkins \u00b6 Download and run Jenkins \u00b6 Run Jenkins in Docker \u00b6 Install Docker Run the jenkinsci/blueocean image as a container in Docker using the following docker run command (bearing in mind that this command automatically downloads the image if this hasn\u2019t been done): docker run \\ --rm \\ -u root \\ -p 8080 :8080 \\ -v jenkins-data:/var/jenkins_home \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v \" $HOME \" :/home \\ jenkinsci/blueocean Proceed to the Post-installation setup wizard .","title":"Install"},{"location":"jenkins/install/#overview","text":"This is our developer docs about How to install Jenkins","title":"Overview"},{"location":"jenkins/install/#install-jenkins","text":"","title":"Install Jenkins"},{"location":"jenkins/install/#download-and-run-jenkins","text":"","title":"Download and run Jenkins"},{"location":"jenkins/install/#run-jenkins-in-docker","text":"Install Docker Run the jenkinsci/blueocean image as a container in Docker using the following docker run command (bearing in mind that this command automatically downloads the image if this hasn\u2019t been done): docker run \\ --rm \\ -u root \\ -p 8080 :8080 \\ -v jenkins-data:/var/jenkins_home \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v \" $HOME \" :/home \\ jenkinsci/blueocean Proceed to the Post-installation setup wizard .","title":"Run Jenkins in Docker"},{"location":"jenkins/note/","text":"Note about Jenkins \u00b6 Jenkins - Docker \u00b6 When run bash scripts Jenkins from Git directory show error \"Permission denied\" Cause: File not permission excute How to fix: In command line, go to folder Git. Provide permission for all file are can excute then commit add file: sudo chmod -R 777 ./ git add . git commit -m \"update permission of file\" Trigger Jenkins build From Url: https://humanwhocodes.com/blog/2015/10/triggering-jenkins-builds-by-url/ From Post-commit local: https://www.youtube.com/watch?v=X74wqtmi4S8 From Github push: https://medium.com/@marc_best/trigger-a-jenkins-build-from-a-github-push-b922468ef1ae","title":"Note"},{"location":"jenkins/note/#note-about-jenkins","text":"","title":"Note about Jenkins"},{"location":"jenkins/note/#jenkins-docker","text":"When run bash scripts Jenkins from Git directory show error \"Permission denied\" Cause: File not permission excute How to fix: In command line, go to folder Git. Provide permission for all file are can excute then commit add file: sudo chmod -R 777 ./ git add . git commit -m \"update permission of file\" Trigger Jenkins build From Url: https://humanwhocodes.com/blog/2015/10/triggering-jenkins-builds-by-url/ From Post-commit local: https://www.youtube.com/watch?v=X74wqtmi4S8 From Github push: https://medium.com/@marc_best/trigger-a-jenkins-build-from-a-github-push-b922468ef1ae","title":"Jenkins - Docker"},{"location":"jenkins/sample/","text":"Overview \u00b6 This is our developer docs about Sample use Jenkins Jenkins Docs tutorial \u00b6 https://jenkins.io/doc/tutorials/build-a-node-js-and-react-app-with-npm/ Dev docs \u00b6 https://github.com/FinbertMagestore/devdocs/tree/develop Jenkins + Docker + Mkdocs Flow CI: Build => Deliver for development => Deliver for production","title":"Sample"},{"location":"jenkins/sample/#overview","text":"This is our developer docs about Sample use Jenkins","title":"Overview"},{"location":"jenkins/sample/#jenkins-docs-tutorial","text":"https://jenkins.io/doc/tutorials/build-a-node-js-and-react-app-with-npm/","title":"Jenkins Docs tutorial"},{"location":"jenkins/sample/#dev-docs","text":"https://github.com/FinbertMagestore/devdocs/tree/develop Jenkins + Docker + Mkdocs Flow CI: Build => Deliver for development => Deliver for production","title":"Dev docs"},{"location":"magento/command/","text":"Overview \u00b6 This is our developer docs about Command line Magento : Command summary \u00b6 Command Description magento setup:cache:{enable disable magento setup:indexer:{status show-mode magento cron:run Runs Magento cron jobs magento setup:di:compile-multi-tenant Use only if you have multiple independent Magento applications (in other words, one common Magento code base but more than one independent instance of the Magento application).Compiles all non-existent proxies and factories; and pre-compiles class definitions, inheritance information, and plugin definitions for multiple stores or websites. magento setup:di:compile Use if you have one instance of the Magento application.Compiles all non-existent proxies and factories; and pre-compiles class definitions, inheritance information, and plugin definitions for one store and website. magento info:dependencies:{show-modules show-modules-circular Commands \u00b6 The following sections discuss the available commands. Manage the cache Manage the indexers Configure and run cron Code compiler Set the Magento mode URN highlighter Dependency reports Translation dictionaries and language packages Deploy static view files Create symlinks to LESS files Run unit tests Convert layout XML files Generate data for performance testing","title":"Command line"},{"location":"magento/command/#overview","text":"This is our developer docs about Command line Magento :","title":"Overview"},{"location":"magento/command/#command-summary","text":"Command Description magento setup:cache:{enable disable magento setup:indexer:{status show-mode magento cron:run Runs Magento cron jobs magento setup:di:compile-multi-tenant Use only if you have multiple independent Magento applications (in other words, one common Magento code base but more than one independent instance of the Magento application).Compiles all non-existent proxies and factories; and pre-compiles class definitions, inheritance information, and plugin definitions for multiple stores or websites. magento setup:di:compile Use if you have one instance of the Magento application.Compiles all non-existent proxies and factories; and pre-compiles class definitions, inheritance information, and plugin definitions for one store and website. magento info:dependencies:{show-modules show-modules-circular","title":"Command summary"},{"location":"magento/command/#commands","text":"The following sections discuss the available commands. Manage the cache Manage the indexers Configure and run cron Code compiler Set the Magento mode URN highlighter Dependency reports Translation dictionaries and language packages Deploy static view files Create symlinks to LESS files Run unit tests Convert layout XML files Generate data for performance testing","title":"Commands"},{"location":"magento/composer/","text":"Overview \u00b6 This is our developer docs about How to install Magento extension by Composer Documents \u00b6 https://devdocs.magento.com/guides/v2.0/extension-dev-guide/package/package_module.html https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md Solution \u00b6 D\u00f9ng Satis \u0111\u1ec3 build 1 file packages.json t\u0129nh bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c repository c\u1ea7n thi\u1ebft Build Satis v\u00e0 \u0111\u1eb7t tr\u00ean domain: https://packages.magestore.com Ph\u1ea7n quy\u1ec1n server ch\u1ec9 cho ph\u00e9p IP c\u1ee7a Magestore \u0111\u1ecdc \u0111\u1ebfn server n\u00e0y (\u0111\u1eb7c bi\u1ec7t l\u00e0 file packages.json) V\u00ed d\u1ee5 d\u00f9ng .htaccess: order deny,allow deny from all allow from 128.199.161.147 Tr\u1ecf domain : https://repo.magestore.com \u0111\u1ebfn 1 th\u01b0 m\u1ee5c ch\u01b0a file packages.json r\u1ed7ng d\u1ea1ng: { \"packages\": [] } Ph\u00e2n quy\u1ec1n th\u01b0 m\u1ee5c repo \u0111\u1ec3: Ch\u1eb7n to\u00e0n b\u1ed9 quy\u1ec1n truy c\u1eadp \u0111\u1ebfn th\u01b0 m\u1ee5c (chuy\u1ec3n h\u01b0\u1edbng v\u1ec1 trang ch\u1ee7 magestore ch\u1eb3ng h\u1ea1n), ri\u00eang request \u0111\u1ebfn https://repo.magestore.com/packages.json th\u00ec redirect v\u1ec1 1 action tr\u00ean magento 2 (site Magstore) \u0111\u1ec3 th\u1ef1c hi\u1ec7n authorization + build content cho packages.json V\u00ed d\u1ee5 action: https:/magestore.com/mscomposer/packages/find/ T\u1ea1i action n\u00e0y s\u1ebd y\u00eau c\u1ea7u nh\u1eadp th\u00f4ng tin authorization \u0111\u1ec3 x\u00e1c th\u1ef1c. Th\u00f4ng tin g\u1ed3m public key + private key user generate t\u1eeb account (Gi\u1ed1ng magento/amasty ) N\u1ebfu x\u00e1c th\u1ef1c th\u00e0nh c\u00f4ng s\u1ebd return v\u1ec1 n\u1ed9i dung c\u00e1c packages \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp g\u1ed3m: Danh s\u00e1ch package define \u1edf b\u01b0\u1edbc 1 (all package c\u1ee7a repo) v\u00e0 filter \u0111i ch\u1ec9 cho truy c\u1eadp c\u00e1c package m\u00e0 kh\u00e1ch h\u00e0ng \u0111\u00e3 mua H\u1ec7 th\u00f4ng qu\u1ea3n l\u00fd packages tr\u00ean magestore s\u1ebd bao g\u1ed3m: [Frontend] 1 page \u0111\u1ec3 customer view list c\u00e1c package h\u1ecd c\u00f3 th\u1ec3 c\u00e0i qua composer [Frontend] 1 page cho customer generate access keys: https://prnt.sc/kqaanl [Admin] Settings: enable/ setup domain \u0111\u00e3 d\u00f9ng \u0111\u1ec3 build statis: https://prnt.sc/kqaaz8 [Admin] Package list: https://prnt.sc/kqab7d [Admin] Package detail: https://prnt.sc/kqabcx [Admin] Link package v\u1edbi product https://prnt.sc/kqabh1 (mua sp th\u00ec \u0111c access package) [Admin] Th\u00f4ng tin repo: https://prnt.sc/kqabsg [Admin] Assign package cho repo: https://prnt.sc/kqabu6 C\u00f3 th\u1ec3 auto generate file config cho Satis \u0111\u1ec3 t\u1ef1 build l\u1ea1i package khi th\u00f4ng tin repo thay \u0111\u1ed5i / khi m\u00ecnh release version m\u1edbi","title":"Install extension Magento by composer"},{"location":"magento/composer/#overview","text":"This is our developer docs about How to install Magento extension by Composer","title":"Overview"},{"location":"magento/composer/#documents","text":"https://devdocs.magento.com/guides/v2.0/extension-dev-guide/package/package_module.html https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md","title":"Documents"},{"location":"magento/composer/#solution","text":"D\u00f9ng Satis \u0111\u1ec3 build 1 file packages.json t\u0129nh bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c repository c\u1ea7n thi\u1ebft Build Satis v\u00e0 \u0111\u1eb7t tr\u00ean domain: https://packages.magestore.com Ph\u1ea7n quy\u1ec1n server ch\u1ec9 cho ph\u00e9p IP c\u1ee7a Magestore \u0111\u1ecdc \u0111\u1ebfn server n\u00e0y (\u0111\u1eb7c bi\u1ec7t l\u00e0 file packages.json) V\u00ed d\u1ee5 d\u00f9ng .htaccess: order deny,allow deny from all allow from 128.199.161.147 Tr\u1ecf domain : https://repo.magestore.com \u0111\u1ebfn 1 th\u01b0 m\u1ee5c ch\u01b0a file packages.json r\u1ed7ng d\u1ea1ng: { \"packages\": [] } Ph\u00e2n quy\u1ec1n th\u01b0 m\u1ee5c repo \u0111\u1ec3: Ch\u1eb7n to\u00e0n b\u1ed9 quy\u1ec1n truy c\u1eadp \u0111\u1ebfn th\u01b0 m\u1ee5c (chuy\u1ec3n h\u01b0\u1edbng v\u1ec1 trang ch\u1ee7 magestore ch\u1eb3ng h\u1ea1n), ri\u00eang request \u0111\u1ebfn https://repo.magestore.com/packages.json th\u00ec redirect v\u1ec1 1 action tr\u00ean magento 2 (site Magstore) \u0111\u1ec3 th\u1ef1c hi\u1ec7n authorization + build content cho packages.json V\u00ed d\u1ee5 action: https:/magestore.com/mscomposer/packages/find/ T\u1ea1i action n\u00e0y s\u1ebd y\u00eau c\u1ea7u nh\u1eadp th\u00f4ng tin authorization \u0111\u1ec3 x\u00e1c th\u1ef1c. Th\u00f4ng tin g\u1ed3m public key + private key user generate t\u1eeb account (Gi\u1ed1ng magento/amasty ) N\u1ebfu x\u00e1c th\u1ef1c th\u00e0nh c\u00f4ng s\u1ebd return v\u1ec1 n\u1ed9i dung c\u00e1c packages \u0111\u01b0\u1ee3c ph\u00e9p truy c\u1eadp g\u1ed3m: Danh s\u00e1ch package define \u1edf b\u01b0\u1edbc 1 (all package c\u1ee7a repo) v\u00e0 filter \u0111i ch\u1ec9 cho truy c\u1eadp c\u00e1c package m\u00e0 kh\u00e1ch h\u00e0ng \u0111\u00e3 mua H\u1ec7 th\u00f4ng qu\u1ea3n l\u00fd packages tr\u00ean magestore s\u1ebd bao g\u1ed3m: [Frontend] 1 page \u0111\u1ec3 customer view list c\u00e1c package h\u1ecd c\u00f3 th\u1ec3 c\u00e0i qua composer [Frontend] 1 page cho customer generate access keys: https://prnt.sc/kqaanl [Admin] Settings: enable/ setup domain \u0111\u00e3 d\u00f9ng \u0111\u1ec3 build statis: https://prnt.sc/kqaaz8 [Admin] Package list: https://prnt.sc/kqab7d [Admin] Package detail: https://prnt.sc/kqabcx [Admin] Link package v\u1edbi product https://prnt.sc/kqabh1 (mua sp th\u00ec \u0111c access package) [Admin] Th\u00f4ng tin repo: https://prnt.sc/kqabsg [Admin] Assign package cho repo: https://prnt.sc/kqabu6 C\u00f3 th\u1ec3 auto generate file config cho Satis \u0111\u1ec3 t\u1ef1 build l\u1ea1i package khi th\u00f4ng tin repo thay \u0111\u1ed5i / khi m\u00ecnh release version m\u1edbi","title":"Solution"},{"location":"magento/framework/","text":"Overview \u00b6 This is our developer docs about Magento Framework. PHP Developer Guide \u00b6 Magento components \u00b6 The Magento application is made up of Modules, Themes, and Language Packages: Modules interact with other parts of the application to accomplish a particular business function or provide a feature. A module can contain a user interface for displaying information or interacting with the user. It can also contain application interfaces that another Magento module or code chunk might call. Themes provide a personalized touch for each Magento installation by changing the look and feel of the storefront or Admin . Two themes are already available within the default Magento 2.x code structure: Blank theme and Luma theme. Refer to these default themes when creating custom themes. Language packages assist in internationalization(i18n) and localization by providing translations for strings that display on the storefront and Admin. Prepare Modules \u00b6 Build \u00b6 Partial caching \u00b6 Full page caching \u00b6 Module development \u00b6","title":"Overview"},{"location":"magento/framework/#overview","text":"This is our developer docs about Magento Framework.","title":"Overview"},{"location":"magento/framework/#php-developer-guide","text":"","title":"PHP Developer Guide"},{"location":"magento/framework/#magento-components","text":"The Magento application is made up of Modules, Themes, and Language Packages: Modules interact with other parts of the application to accomplish a particular business function or provide a feature. A module can contain a user interface for displaying information or interacting with the user. It can also contain application interfaces that another Magento module or code chunk might call. Themes provide a personalized touch for each Magento installation by changing the look and feel of the storefront or Admin . Two themes are already available within the default Magento 2.x code structure: Blank theme and Luma theme. Refer to these default themes when creating custom themes. Language packages assist in internationalization(i18n) and localization by providing translations for strings that display on the storefront and Admin.","title":"Magento components"},{"location":"magento/framework/#prepare-modules","text":"","title":"Prepare Modules"},{"location":"magento/framework/#build","text":"","title":"Build"},{"location":"magento/framework/#partial-caching","text":"","title":"Partial caching"},{"location":"magento/framework/#full-page-caching","text":"","title":"Full page caching"},{"location":"magento/framework/#module-development","text":"","title":"Module development"},{"location":"magento/install/","text":"Overview \u00b6 This is our developer docs about How to install Magento : Package \u00b6 Magento CE: http://pubfiles.nexcess.net/magento/ce-packages/ Install Magento on Docker \u00b6 Install Magento on Ubuntu 16.04 \u00b6 Install Apache2, Mysql on Ubuntu 16.04 Install Lamp server: sudo apt-get install lamp-server^ Apache install and setup: sudo apt-get update sudo apt-get install apache2 Adjust the Firewall to Allow Web Traffic: sudo ufw allow in \"Apache Full\" Install MySQL: sudo apt-get install mysql-server Install PHP: sudo apt-get install php libapache2-mod-php php-mcrypt php-mysql sudo nano /etc/apache2/mods-enabled/dir.conf Change dir.conf to <IfModule mod_dir.c> DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm </IfModule> Restart Apache2 sudo systemctl restart apache2 Apache setup Create file magento.conf sudo nano /etc/apache2/sites-available/magento.conf with text: <VirtualHost *:80> DocumentRoot /var/www/html <Directory /var/www/html/> Options Indexes FollowSymLinks MultiViews AllowOverride All </Directory> </VirtualHost> sudo a2ensite magento.conf sudo a2dissite 000 -default.conf sudo service apache2 reload - PHP setup sudo nano /etc/php/7.0/apache2/php.ini Find and update info: max_execution_time=18000 display_errors = On max_input_time=600 post_max_size=80M max_file_uploads=200 memory_limit=2048M session.cookie_lifetime = 3153600000 session.gc_maxlifetime = 3153600000 session.cache_expire = 52560000 Install extension PHP: sudo apt-get install php-mcrypt php-curl php-gd libcurl3 php-intl php-xsl Run command: sudo a2enmod rewrite sudo phpenmod mcrypt sudo service apache2 restart Create database: mysql -u root -p CREATE DATABASE magento ; Config auth magento https://devdocs.magento.com/guides/v2.0/install-gde/prereq/connect-auth.html Create file auth.json with content below: nano ~/.composer/auth.json { \"http-basic\": { \"repo.magento.com\": { \"username\": \"5dea11c9af045103e3499cbcd050a661\", \"password\": \"6d1cc610c68c1148063daa14b2d5b5a5\" } } } Download package Magento and create folder in apache mkdir /var/www/html/magento copy it to /var/www/html/magento . Then open link in browser http://127.0.0.1/magento/setup to setup magento. Install extension \u00b6 Magento 1 \u00b6 Copy extension to magento root folder. Flush cache in backend or remove folder \"var/cache\" Magento 2 \u00b6 Copy extension to magento root folder. Run commands: cd /var/www/html/magento php bin/magento setup:di:compile php bin/magento setup:upgrade php bin/magento setup:static-content:deploy php bin/magento deploy:mode:set developer php bin/magento cache:flush sudo chmod -R 777 ./ Reinstall \u00b6 After install magento want reinstall magento Magento 1: \u00b6 Comment all info in file \"app/etc/local.xml\". Enter link http://127.0.0.1/magento in browser auto run setup again. Note: If not want reinstall after comment file \"local.xml\" then need uncomment file \"local.xml\" and then remove all file in \"var/cache\" by command line rm -rf /var/www/html/magento/var/cache Magento 2 \u00b6 Comment all info in file \"app/etc/env.php\". Enter link http://127.0.0.1/magento/setup in browser auto run setup again.","title":"Installation"},{"location":"magento/install/#overview","text":"This is our developer docs about How to install Magento :","title":"Overview"},{"location":"magento/install/#package","text":"Magento CE: http://pubfiles.nexcess.net/magento/ce-packages/","title":"Package"},{"location":"magento/install/#install-magento-on-docker","text":"","title":"Install Magento on Docker"},{"location":"magento/install/#install-magento-on-ubuntu-1604","text":"Install Apache2, Mysql on Ubuntu 16.04 Install Lamp server: sudo apt-get install lamp-server^ Apache install and setup: sudo apt-get update sudo apt-get install apache2 Adjust the Firewall to Allow Web Traffic: sudo ufw allow in \"Apache Full\" Install MySQL: sudo apt-get install mysql-server Install PHP: sudo apt-get install php libapache2-mod-php php-mcrypt php-mysql sudo nano /etc/apache2/mods-enabled/dir.conf Change dir.conf to <IfModule mod_dir.c> DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm </IfModule> Restart Apache2 sudo systemctl restart apache2 Apache setup Create file magento.conf sudo nano /etc/apache2/sites-available/magento.conf with text: <VirtualHost *:80> DocumentRoot /var/www/html <Directory /var/www/html/> Options Indexes FollowSymLinks MultiViews AllowOverride All </Directory> </VirtualHost> sudo a2ensite magento.conf sudo a2dissite 000 -default.conf sudo service apache2 reload - PHP setup sudo nano /etc/php/7.0/apache2/php.ini Find and update info: max_execution_time=18000 display_errors = On max_input_time=600 post_max_size=80M max_file_uploads=200 memory_limit=2048M session.cookie_lifetime = 3153600000 session.gc_maxlifetime = 3153600000 session.cache_expire = 52560000 Install extension PHP: sudo apt-get install php-mcrypt php-curl php-gd libcurl3 php-intl php-xsl Run command: sudo a2enmod rewrite sudo phpenmod mcrypt sudo service apache2 restart Create database: mysql -u root -p CREATE DATABASE magento ; Config auth magento https://devdocs.magento.com/guides/v2.0/install-gde/prereq/connect-auth.html Create file auth.json with content below: nano ~/.composer/auth.json { \"http-basic\": { \"repo.magento.com\": { \"username\": \"5dea11c9af045103e3499cbcd050a661\", \"password\": \"6d1cc610c68c1148063daa14b2d5b5a5\" } } } Download package Magento and create folder in apache mkdir /var/www/html/magento copy it to /var/www/html/magento . Then open link in browser http://127.0.0.1/magento/setup to setup magento.","title":"Install Magento on Ubuntu 16.04"},{"location":"magento/install/#install-extension","text":"","title":"Install extension"},{"location":"magento/install/#magento-1","text":"Copy extension to magento root folder. Flush cache in backend or remove folder \"var/cache\"","title":"Magento 1"},{"location":"magento/install/#magento-2","text":"Copy extension to magento root folder. Run commands: cd /var/www/html/magento php bin/magento setup:di:compile php bin/magento setup:upgrade php bin/magento setup:static-content:deploy php bin/magento deploy:mode:set developer php bin/magento cache:flush sudo chmod -R 777 ./","title":"Magento 2"},{"location":"magento/install/#reinstall","text":"After install magento want reinstall magento","title":"Reinstall"},{"location":"magento/install/#magento-1_1","text":"Comment all info in file \"app/etc/local.xml\". Enter link http://127.0.0.1/magento in browser auto run setup again. Note: If not want reinstall after comment file \"local.xml\" then need uncomment file \"local.xml\" and then remove all file in \"var/cache\" by command line rm -rf /var/www/html/magento/var/cache","title":"Magento 1:"},{"location":"magento/install/#magento-2_1","text":"Comment all info in file \"app/etc/env.php\". Enter link http://127.0.0.1/magento/setup in browser auto run setup again.","title":"Magento 2"},{"location":"magento/magento2_exam_notes/","text":"Preparation notes for Magento 2 Certified Professional Developer exam \u00b6 Overview \u00b6 Magento Architecture and Customization Techniques Request Flow Processing Customizing the Magento UI Working with Databases in Magento Using the Entity-Attribute-Value -EAV- Model Developing with Adminhtml Customizing the Catalog Customizing the Checkout Process Sales Operations Customer Management","title":"Preparation notes for Magento 2 Certified Professional Developer exam"},{"location":"magento/magento2_exam_notes/#preparation-notes-for-magento-2-certified-professional-developer-exam","text":"","title":"Preparation notes for Magento 2 Certified Professional Developer exam"},{"location":"magento/magento2_exam_notes/#overview","text":"Magento Architecture and Customization Techniques Request Flow Processing Customizing the Magento UI Working with Databases in Magento Using the Entity-Attribute-Value -EAV- Model Developing with Adminhtml Customizing the Catalog Customizing the Checkout Process Sales Operations Customer Management","title":"Overview"},{"location":"magento/note/","text":"Note about Magento \u00b6 Libs for Magento Example: Bash script install magento 1, 2 File database export mysql Work in site online Permission: tr\u01b0\u1edbc khi work em n\u00ean check mode php bin/magento deploy:mode:show th\u01b0\u1eddng c\u00e0i xong s\u1ebd \u0111\u1ec3 default n\u00ean chuy\u1ec3n qua developer php bin/magento deploy:mode:set developer \u0111\u1ec3 e s\u1eeda code em kh\u00f4ng ph\u1ea3i ch\u1ea1y l\u1ec7nh compile l\u1ea1i v\u1eeba r\u1ed3i site b\u1ecb chuy\u1ec3n qua mode production n\u1ebfu chuy\u1ec3n qua m\u00e0 em ch\u1ea1y setup upgrade th\u00ec e p ch\u1ea1y th\u00eam deploy content n\u1eefa site kh\u00e1ch th\u00ec \u0111\u1ec3 b\u1ea3o \u0111\u1ea3m v\u1ec1 m\u1eb7t security th\u00ec e ch\u1ec9 c\u1ea7n d\u00f9ng 755 th\u00f4i Tr\u01b0\u1edbc khi l\u00e0m ki\u1ec3m tra xem site c\u1ee7a kh\u00e1ch h\u00e0ng c\u00f3 b\u1ecb ch\u1ebft kh\u00f4ng? Sau khi m\u00ecnh c\u00e0i, l\u1ed7i ph\u00e1t hi\u1ec7n l\u00e0 tr\u01b0\u1edbc hay sau khi m\u00ecnh c\u00e0i v\u00e0o site kh\u00e1ch. Ch\u1ea1y c\u00e1c l\u1ec7nh c\u1ee7a Magento: # remove code of Old Magestore Extension rm -rf app/code/Magestore/* # upload code of new Magestore Extension # view deploy mode php bin/magento deploy:mode:show # set deploy mode is developer and set permission before process php bin/magento deploy:mode:set developer find app/code lib var pub/static pub/media vendor -type d -exec chmod 775 {} \\; find app/code lib var pub/static pub/media vendor -type f -exec chmod 664 {} \\; find app/code lib var pub/static pub/media vendor app/etc \\( -type d -or -type f \\) -exec chmod g+w {} + && chmod o+rwx app/etc/env.php # process implement, upload my extension php bin/magento s:upgrade php bin/magento s:di:compile php bin/magento indexer:reindex php bin/magento c:c # set back deploy mode production and set back permission php bin/magento deploy:mode:set production --skip-compilation php bin/magento s:static-content:deploy find app/code lib var pub/static pub/media vendor -type d -exec chmod 755 {} \\; find app/code lib var pub/static pub/media vendor -type f -exec chmod 644 {} \\; find app/code lib var pub/static pub/media vendor app/etc \\( -type d -or -type f \\) -exec chmod g-w {} + && chmod o-rwx app/etc/env.php Config permission for folder and file in root magento dir (Faster) find . -type f -print0 | xargs -I % -0 chmod 644 % find . -type d -print0 | xargs -I % -0 chmod 755 % or find . -type d -exec chmod 755 {} \\; find . -type f -exec chmod 644 {} \\; Debug var_dump($item->debug()); die(); Reload config php.ini by some ways: Reload server: sudo service apache2 restart Reload Php apachectl graceful Ui Component for tags input Detail about it, you can see here","title":"Note"},{"location":"magento/note/#note-about-magento","text":"Libs for Magento Example: Bash script install magento 1, 2 File database export mysql Work in site online Permission: tr\u01b0\u1edbc khi work em n\u00ean check mode php bin/magento deploy:mode:show th\u01b0\u1eddng c\u00e0i xong s\u1ebd \u0111\u1ec3 default n\u00ean chuy\u1ec3n qua developer php bin/magento deploy:mode:set developer \u0111\u1ec3 e s\u1eeda code em kh\u00f4ng ph\u1ea3i ch\u1ea1y l\u1ec7nh compile l\u1ea1i v\u1eeba r\u1ed3i site b\u1ecb chuy\u1ec3n qua mode production n\u1ebfu chuy\u1ec3n qua m\u00e0 em ch\u1ea1y setup upgrade th\u00ec e p ch\u1ea1y th\u00eam deploy content n\u1eefa site kh\u00e1ch th\u00ec \u0111\u1ec3 b\u1ea3o \u0111\u1ea3m v\u1ec1 m\u1eb7t security th\u00ec e ch\u1ec9 c\u1ea7n d\u00f9ng 755 th\u00f4i Tr\u01b0\u1edbc khi l\u00e0m ki\u1ec3m tra xem site c\u1ee7a kh\u00e1ch h\u00e0ng c\u00f3 b\u1ecb ch\u1ebft kh\u00f4ng? Sau khi m\u00ecnh c\u00e0i, l\u1ed7i ph\u00e1t hi\u1ec7n l\u00e0 tr\u01b0\u1edbc hay sau khi m\u00ecnh c\u00e0i v\u00e0o site kh\u00e1ch. Ch\u1ea1y c\u00e1c l\u1ec7nh c\u1ee7a Magento: # remove code of Old Magestore Extension rm -rf app/code/Magestore/* # upload code of new Magestore Extension # view deploy mode php bin/magento deploy:mode:show # set deploy mode is developer and set permission before process php bin/magento deploy:mode:set developer find app/code lib var pub/static pub/media vendor -type d -exec chmod 775 {} \\; find app/code lib var pub/static pub/media vendor -type f -exec chmod 664 {} \\; find app/code lib var pub/static pub/media vendor app/etc \\( -type d -or -type f \\) -exec chmod g+w {} + && chmod o+rwx app/etc/env.php # process implement, upload my extension php bin/magento s:upgrade php bin/magento s:di:compile php bin/magento indexer:reindex php bin/magento c:c # set back deploy mode production and set back permission php bin/magento deploy:mode:set production --skip-compilation php bin/magento s:static-content:deploy find app/code lib var pub/static pub/media vendor -type d -exec chmod 755 {} \\; find app/code lib var pub/static pub/media vendor -type f -exec chmod 644 {} \\; find app/code lib var pub/static pub/media vendor app/etc \\( -type d -or -type f \\) -exec chmod g-w {} + && chmod o-rwx app/etc/env.php Config permission for folder and file in root magento dir (Faster) find . -type f -print0 | xargs -I % -0 chmod 644 % find . -type d -print0 | xargs -I % -0 chmod 755 % or find . -type d -exec chmod 755 {} \\; find . -type f -exec chmod 644 {} \\; Debug var_dump($item->debug()); die(); Reload config php.ini by some ways: Reload server: sudo service apache2 restart Reload Php apachectl graceful Ui Component for tags input Detail about it, you can see here","title":"Note about Magento"},{"location":"magento/pwa_studio/","text":"Overview \u00b6 This is our developer docs about Magento PWA Studio. Our docs includes: Install \u00b6 Install Magento 2.3 Without Sample Data Install on Docker Document Magento Prerequisites: Php 7.1, Magento without sample data then Install Venia sample data. Install: Copy or create the deploy script: packages/venia-concept/deployVeniaSampleData.sh Execute the deploy script bash deployVeniaSampleData.sh Install the sample data modules bin/magento setup:upgrade Install PWA Studio Research \u00b6 Scripts Some library: multispinner node-multispinner is a Node.js module for managing multiple progress indicators (spinners) in CLI apps. chokidar Listen change in every file to restart Webpack Dev Server. portscanner Portscanner can check a port, or range of ports, for 'open' or 'closed' statuses. Random a port when start Webpack Dev Server. PWA Buildpack Peregrine UPWARD Venia concept Note \u00b6 Install PWA by docker on Server with RAM 2GB, you can be error . Solution is enable the swap /bin/dd if = /dev/zero of = /var/swap.1 bs = 1M count = 1024 /sbin/mkswap /var/swap.1 /sbin/swapon /var/swap.1 Document sharing Magento 2.3 - PWA Studio","title":"Magento 2.3 - PWA Studio"},{"location":"magento/pwa_studio/#overview","text":"This is our developer docs about Magento PWA Studio. Our docs includes:","title":"Overview"},{"location":"magento/pwa_studio/#install","text":"Install Magento 2.3 Without Sample Data Install on Docker Document Magento Prerequisites: Php 7.1, Magento without sample data then Install Venia sample data. Install: Copy or create the deploy script: packages/venia-concept/deployVeniaSampleData.sh Execute the deploy script bash deployVeniaSampleData.sh Install the sample data modules bin/magento setup:upgrade Install PWA Studio","title":"Install"},{"location":"magento/pwa_studio/#research","text":"Scripts Some library: multispinner node-multispinner is a Node.js module for managing multiple progress indicators (spinners) in CLI apps. chokidar Listen change in every file to restart Webpack Dev Server. portscanner Portscanner can check a port, or range of ports, for 'open' or 'closed' statuses. Random a port when start Webpack Dev Server. PWA Buildpack Peregrine UPWARD Venia concept","title":"Research"},{"location":"magento/pwa_studio/#note","text":"Install PWA by docker on Server with RAM 2GB, you can be error . Solution is enable the swap /bin/dd if = /dev/zero of = /var/swap.1 bs = 1M count = 1024 /sbin/mkswap /var/swap.1 /sbin/swapon /var/swap.1 Document sharing Magento 2.3 - PWA Studio","title":"Note"},{"location":"magento/test/","text":"Overview \u00b6 This is our developer docs about Magento Functional Testing Framework. Our docs includes: Functional Testing Framework","title":"Overview"},{"location":"magento/test/#overview","text":"This is our developer docs about Magento Functional Testing Framework. Our docs includes: Functional Testing Framework","title":"Overview"},{"location":"magento/framework/build/","text":"Build extension \u00b6 Di.xml file \u00b6 Areas and application entry points \u00b6 Magento loads the configuration in the following stages: Initial (app/etc/di.xml) Global ( /etc/di.xml) Area-specific ( /etc/ /di.xml) Abstraction-implementation mappings \u00b6 <!-- File: app/etc/di.xml --> <config> <preference for= \"Magento\\Core\\Model\\UrlInterface\" type= \"Magento\\Core\\Model\\Url\" /> </config> - Classes has relation: Magento\\Framework\\ObjectManager\\ObjectManager.php Magento\\Framework\\ObjectManager\\Config.php - Process: Magento read all file di.xml , save info about Preference in all file di.xml to ObjectManager\\Config::_preferences and ObjectManager\\Config::_cache . When call \\Magento\\Framework\\ObjectManagerInterface::create($type) , Magento call public function create($type, array $arguments = []) { return $this->_factory->create($this->_config->getPreference($type), $arguments); } Config get preference for once type, then init and return object with construct of preference. Virtual types \u00b6","title":"Build"},{"location":"magento/framework/build/#build-extension","text":"","title":"Build extension"},{"location":"magento/framework/build/#dixml-file","text":"","title":"Di.xml file"},{"location":"magento/framework/build/#areas-and-application-entry-points","text":"Magento loads the configuration in the following stages: Initial (app/etc/di.xml) Global ( /etc/di.xml) Area-specific ( /etc/ /di.xml)","title":"Areas and application entry points"},{"location":"magento/framework/build/#abstraction-implementation-mappings","text":"<!-- File: app/etc/di.xml --> <config> <preference for= \"Magento\\Core\\Model\\UrlInterface\" type= \"Magento\\Core\\Model\\Url\" /> </config> - Classes has relation: Magento\\Framework\\ObjectManager\\ObjectManager.php Magento\\Framework\\ObjectManager\\Config.php - Process: Magento read all file di.xml , save info about Preference in all file di.xml to ObjectManager\\Config::_preferences and ObjectManager\\Config::_cache . When call \\Magento\\Framework\\ObjectManagerInterface::create($type) , Magento call public function create($type, array $arguments = []) { return $this->_factory->create($this->_config->getPreference($type), $arguments); } Config get preference for once type, then init and return object with construct of preference.","title":"Abstraction-implementation mappings"},{"location":"magento/framework/build/#virtual-types","text":"","title":"Virtual types"},{"location":"magento/framework/module_development/","text":"Module development \u00b6 Object manager and dependency injection \u00b6 Events and observers \u00b6","title":"Module development"},{"location":"magento/framework/module_development/#module-development","text":"","title":"Module development"},{"location":"magento/framework/module_development/#object-manager-and-dependency-injection","text":"","title":"Object manager and dependency injection"},{"location":"magento/framework/module_development/#events-and-observers","text":"","title":"Events and observers"},{"location":"magento/framework/note/","text":"More information about Magento Framework \u00b6 Object Manager \u00b6 Object Manager Devdocs Object manager used to create new object instance and retrieve cached object instance all object in Magento at anywhere. View class vendor/magento/framework/ObjectManagerInterface.php . interface ObjectManagerInterface { /** * Create new object instance * * @param string $type * @param array $arguments * @return mixed */ public function create($type, array $arguments = []); /** * Retrieve cached object instance * * @param string $type * @return mixed */ public function get($type); /** * Configure object manager * * @param array $configuration * @return void */ public function configure(array $configuration); } Detail more than about Object manager, how Magento initiation Object manager. at index.php , $bootstrap = \\Magento\\Framework\\App\\Bootstrap::create(BP, $_SERVER); at vendor/magento/framework/App/Bootstrap.php public static function create($rootDir, array $initParams, ObjectManagerFactory $factory = null) { self::populateAutoloader($rootDir, $initParams); if ($factory === null) { $factory = self::createObjectManagerFactory($rootDir, $initParams); } return new self($factory, $rootDir, $initParams); } ... public static function createObjectManagerFactory($rootDir, array $initParams) { $dirList = self::createFilesystemDirectoryList($rootDir, $initParams); $driverPool = self::createFilesystemDriverPool($initParams); $configFilePool = self::createConfigFilePool(); return new ObjectManagerFactory($dirList, $driverPool, $configFilePool); } ... public function __construct(ObjectManagerFactory $factory, $rootDir, array $initParams) { $this->factory = $factory; $this->rootDir = $rootDir; $this->server = $initParams; $this->objectManager = $this->factory->create($this->server); } Magento init ObjectManagerFactory, and from ObjectManagerFactory init ObjectManagerInterface. at vendor/magento/framework/App/ObjectManagerFactory.php public function create(array $arguments) { /** @var EnvironmentFactory $envFactory */ $envFactory = new $this->envFactoryClassName($relations, $definitions); /** @var EnvironmentInterface $env */ $env = $envFactory->createEnvironment(); /** @var ConfigInterface $diConfig */ $diConfig = $env->getDiConfig(); if ($env->getMode() != Environment\\Compiled::MODE) { $configData = $this->_loadPrimaryConfig($this->directoryList, $this->driverPool, $argumentMapper, $appMode); if ($configData) { $diConfig->extend($configData); } } $this->factory = $env->getObjectManagerFactory($arguments); /** @var \\Magento\\Framework\\ObjectManagerInterface $objectManager */ $objectManager = new $this->_locatorClassName($this->factory, $diConfig, $sharedInstances); $this->factory->setObjectManager($objectManager); $env->configureObjectManager($diConfig, $sharedInstances); return $objectManager; } Magento EnvironmentInterface distinguish mode: Environment\\Compiled::MODE or else. At vendor/magento/framework/App/EnvironmentFactory.php public function createEnvironment() { switch ($this->getMode()) { case Compiled::MODE: return new Compiled($this); break; default: return new Developer($this); } } Mode Compiled after run command php bin/magento setup:di:compile , Magento will compile all config to one file php contain config at folder generated/metadata with every area: global, .... It usually map with Magento application mode as production. In Magento application mode as developer, folder generated/metadata will be deleted. In mode Compiled, $diConfig = $env->getDiConfig(); will get config from file php after compiled. Else in mode Developer, $configData = $this->_loadPrimaryConfig($this->directoryList, $this->driverPool, $argumentMapper, $appMode); will help magento read config from file xml app/etc/di.xml . At line $this->factory = $env->getObjectManagerFactory($arguments); , Magento init factory from $env in class AbstractEnvironment.php . This factory used to init $objectManager and this object be set to this factory $this->factory->setObjectManager($objectManager); at index.php $app = $bootstrap->createApplication(\\Magento\\Framework\\App\\Http::class); $bootstrap->run($app); In Bootstrap.php , object manager used to create application. Magento initiation ObjectManager follow design pattern Singleton Use object manger to create and retrieve object at anywhere in Magento. $objectClassCreateNew = \\Magento\\Framework\\App\\ObjectManager::getInstance() ->create($typeClassName); $objectClassRetrieve = \\Magento\\Framework\\App\\ObjectManager::getInstance() ->get($typeClassName); private $_objectManager; public function __construct( \\Magento\\Framework\\ObjectManagerInterface $objectmanager ){ $this->_objectManager = $objectmanager; } public function getExample() { $customerSession = $this->_objectManager->create(\"Magento\\Customer\\Model\\Session\"); if ($customerSession->isLoggedIn()) { $customerData = $customerSession->getCustomer()->getData(); /*Your logic*/ } } Detail more than how Object manager create and retrieve object, how inject interface to __construct of one class but Magento still inject extract object implement this interface. When call \\Magento\\Framework\\App\\ObjectManager::getInstance()->create($typeClassName) , Magento create object (view file vendor/magento/framework/ObjectManager/ObjectManager.php ) public function create($type, array $arguments = []) { return $this->_factory->create($this->_config->getPreference($type), $arguments); } $this->_factory created when Object manager created and it is new Developer($this); created in file App/EnvironmentFactory.php in file vendor/magento/framework/ObjectManager/Factory/Dynamic/Developer.php public function create($requestedType, array $arguments = []) { $type = $this->config->getInstanceType($requestedType); $parameters = $this->definitions->getParameters($type); if ($parameters == null) { return new $type(); } if (isset($this->creationStack[$requestedType])) { $lastFound = end($this->creationStack); $this->creationStack = []; throw new \\LogicException(\"Circular dependency: {$requestedType} depends on {$lastFound} and vice versa.\"); } $this->creationStack[$requestedType] = $requestedType; try { $args = $this->_resolveArguments($requestedType, $parameters, $arguments); unset($this->creationStack[$requestedType]); } catch (\\Exception $e) { unset($this->creationStack[$requestedType]); throw $e; } return $this->createObject($type, $args); } $type is instance set up in file di.xml . $parameters is list of method parameters of $type . $args is recursive to resolve constructor arguments. Magento 2 request flow overview \u00b6 Some documents: https://www.atwix.com/magento-2/request-flow-overview/ https://nathanmcbride.io/magento2/Request-Flow-In-Magento-2 CLI Command \u00b6 Add CLI Command devdocs Events and observers \u00b6 Events and observers Event and observers in Magento is synchronize. When you call dispatch event with a object, magento will read all observers in all file events.xml , call observers listen of this event and execute function execute in observers.","title":"Note"},{"location":"magento/framework/note/#more-information-about-magento-framework","text":"","title":"More information about Magento Framework"},{"location":"magento/framework/note/#object-manager","text":"Object Manager Devdocs Object manager used to create new object instance and retrieve cached object instance all object in Magento at anywhere. View class vendor/magento/framework/ObjectManagerInterface.php . interface ObjectManagerInterface { /** * Create new object instance * * @param string $type * @param array $arguments * @return mixed */ public function create($type, array $arguments = []); /** * Retrieve cached object instance * * @param string $type * @return mixed */ public function get($type); /** * Configure object manager * * @param array $configuration * @return void */ public function configure(array $configuration); } Detail more than about Object manager, how Magento initiation Object manager. at index.php , $bootstrap = \\Magento\\Framework\\App\\Bootstrap::create(BP, $_SERVER); at vendor/magento/framework/App/Bootstrap.php public static function create($rootDir, array $initParams, ObjectManagerFactory $factory = null) { self::populateAutoloader($rootDir, $initParams); if ($factory === null) { $factory = self::createObjectManagerFactory($rootDir, $initParams); } return new self($factory, $rootDir, $initParams); } ... public static function createObjectManagerFactory($rootDir, array $initParams) { $dirList = self::createFilesystemDirectoryList($rootDir, $initParams); $driverPool = self::createFilesystemDriverPool($initParams); $configFilePool = self::createConfigFilePool(); return new ObjectManagerFactory($dirList, $driverPool, $configFilePool); } ... public function __construct(ObjectManagerFactory $factory, $rootDir, array $initParams) { $this->factory = $factory; $this->rootDir = $rootDir; $this->server = $initParams; $this->objectManager = $this->factory->create($this->server); } Magento init ObjectManagerFactory, and from ObjectManagerFactory init ObjectManagerInterface. at vendor/magento/framework/App/ObjectManagerFactory.php public function create(array $arguments) { /** @var EnvironmentFactory $envFactory */ $envFactory = new $this->envFactoryClassName($relations, $definitions); /** @var EnvironmentInterface $env */ $env = $envFactory->createEnvironment(); /** @var ConfigInterface $diConfig */ $diConfig = $env->getDiConfig(); if ($env->getMode() != Environment\\Compiled::MODE) { $configData = $this->_loadPrimaryConfig($this->directoryList, $this->driverPool, $argumentMapper, $appMode); if ($configData) { $diConfig->extend($configData); } } $this->factory = $env->getObjectManagerFactory($arguments); /** @var \\Magento\\Framework\\ObjectManagerInterface $objectManager */ $objectManager = new $this->_locatorClassName($this->factory, $diConfig, $sharedInstances); $this->factory->setObjectManager($objectManager); $env->configureObjectManager($diConfig, $sharedInstances); return $objectManager; } Magento EnvironmentInterface distinguish mode: Environment\\Compiled::MODE or else. At vendor/magento/framework/App/EnvironmentFactory.php public function createEnvironment() { switch ($this->getMode()) { case Compiled::MODE: return new Compiled($this); break; default: return new Developer($this); } } Mode Compiled after run command php bin/magento setup:di:compile , Magento will compile all config to one file php contain config at folder generated/metadata with every area: global, .... It usually map with Magento application mode as production. In Magento application mode as developer, folder generated/metadata will be deleted. In mode Compiled, $diConfig = $env->getDiConfig(); will get config from file php after compiled. Else in mode Developer, $configData = $this->_loadPrimaryConfig($this->directoryList, $this->driverPool, $argumentMapper, $appMode); will help magento read config from file xml app/etc/di.xml . At line $this->factory = $env->getObjectManagerFactory($arguments); , Magento init factory from $env in class AbstractEnvironment.php . This factory used to init $objectManager and this object be set to this factory $this->factory->setObjectManager($objectManager); at index.php $app = $bootstrap->createApplication(\\Magento\\Framework\\App\\Http::class); $bootstrap->run($app); In Bootstrap.php , object manager used to create application. Magento initiation ObjectManager follow design pattern Singleton Use object manger to create and retrieve object at anywhere in Magento. $objectClassCreateNew = \\Magento\\Framework\\App\\ObjectManager::getInstance() ->create($typeClassName); $objectClassRetrieve = \\Magento\\Framework\\App\\ObjectManager::getInstance() ->get($typeClassName); private $_objectManager; public function __construct( \\Magento\\Framework\\ObjectManagerInterface $objectmanager ){ $this->_objectManager = $objectmanager; } public function getExample() { $customerSession = $this->_objectManager->create(\"Magento\\Customer\\Model\\Session\"); if ($customerSession->isLoggedIn()) { $customerData = $customerSession->getCustomer()->getData(); /*Your logic*/ } } Detail more than how Object manager create and retrieve object, how inject interface to __construct of one class but Magento still inject extract object implement this interface. When call \\Magento\\Framework\\App\\ObjectManager::getInstance()->create($typeClassName) , Magento create object (view file vendor/magento/framework/ObjectManager/ObjectManager.php ) public function create($type, array $arguments = []) { return $this->_factory->create($this->_config->getPreference($type), $arguments); } $this->_factory created when Object manager created and it is new Developer($this); created in file App/EnvironmentFactory.php in file vendor/magento/framework/ObjectManager/Factory/Dynamic/Developer.php public function create($requestedType, array $arguments = []) { $type = $this->config->getInstanceType($requestedType); $parameters = $this->definitions->getParameters($type); if ($parameters == null) { return new $type(); } if (isset($this->creationStack[$requestedType])) { $lastFound = end($this->creationStack); $this->creationStack = []; throw new \\LogicException(\"Circular dependency: {$requestedType} depends on {$lastFound} and vice versa.\"); } $this->creationStack[$requestedType] = $requestedType; try { $args = $this->_resolveArguments($requestedType, $parameters, $arguments); unset($this->creationStack[$requestedType]); } catch (\\Exception $e) { unset($this->creationStack[$requestedType]); throw $e; } return $this->createObject($type, $args); } $type is instance set up in file di.xml . $parameters is list of method parameters of $type . $args is recursive to resolve constructor arguments.","title":"Object Manager"},{"location":"magento/framework/note/#magento-2-request-flow-overview","text":"Some documents: https://www.atwix.com/magento-2/request-flow-overview/ https://nathanmcbride.io/magento2/Request-Flow-In-Magento-2","title":"Magento 2 request flow overview"},{"location":"magento/framework/note/#cli-command","text":"Add CLI Command devdocs","title":"CLI Command"},{"location":"magento/framework/note/#events-and-observers","text":"Events and observers Event and observers in Magento is synchronize. When you call dispatch event with a object, magento will read all observers in all file events.xml , call observers listen of this event and execute function execute in observers.","title":"Events and observers"},{"location":"magento/framework/page_caching/","text":"","title":"Full page caching"},{"location":"magento/framework/partial_caching/","text":"Partial caching \u00b6 Magento uses Zend_Cache to interact with the cache storage. However, Magento also has the Magento\\Cache library for implementing Magento-specific caching. Information about caching \u00b6 Partial caching Create custom cache engines Default Magento after install using cache on file: folder magento use to save info about cache in var/cache and var/page_cache . You can use Magento 2 database for caching. Cached object are stored in the cache and cache_tag . Create a cache type You can create new cache type. Load and save information which you need with this cache type. Cache type can enable, disable, clear using Cache management page in the Magento Admin. More information about caching \u00b6 Zend Cache \u00b6 Zend framework has 2 type of cache: Backend and Frontend. Detail more than about Zend Cache at here . Cache backend is the \"cache engine\" : it can be file, memcached, etc. Cache frontend specify what kind of data will be stored in the cache. Caching in Zend Framework is operated by frontends while cache records are stored through backend adapters (File, Sqlite, Memcache...) through a flexible system of IDs and tags. Using those, it is easy to delete specific types of records afterwards (for example: \"delete all cache records marked with a given tag\"). The core of the module (Zend_Cache_Core) is generic, flexible and configurable. Yet, for your specific needs there are cache frontends that extend Zend_Cache_Core for convenience: Output, File, Function and Class. Magento Partial Cache \u00b6 Some folder and file important in magento framework vender/magento/framework/App/Cache vender/magento/framework/App/Cache.php vender/magento/framework/App/CacheInterface.php vender/magento/framework/Cache Folder cache in server magento var/cache var/page_cache Magento\\Framework\\App\\CacheInterface.php contains some function important about cache: Load data from cache by id public function load($identifier); Save data to cache public function save($data, $identifier, $tags = [], $lifeTime = null); Remove cached data by identifier public function remove($identifier); Clean cached data by specific tag public function clean($tags = []); Default Magento use Cm_Cache_Backend_File which much improved replacement for Zend_Cache_Backend_File - works great with Magento! Cached object saved in file with filename contain cache id, content of file contain metadatas and data. $metadatas = array( 'hash' => $hash, 'mtime' => time(), 'expire' => $this->_expireTime($this->getLifetime($specificLifetime)), 'tags' => implode(',', $tags), ); $res = $this->_filePutContents($file, serialize($metadatas).\"\\n\".$data); $res = $res && $this->_updateIdsTags(array($id), $tags, 'merge'); Tags saved in folder var/cache/mage_tags . File name is tag name, content is all cache id which linked to this tag. Cached object data saved in file as string which serialized from data object. Example about load data from cache: vendor/magento/framework/App/ObjectManager/ConfigLoader.php . $cacheId = $area . '::DiConfig'; $data = $this->_cache->load($cacheId); if (!$data) { $data = $this->_getReader()->read($area); $this->_cache->save($this->getSerializer()->serialize($data), $cacheId); } else { $data = $this->getSerializer()->unserialize($data); } return $data; Declare cache id (cache id must is exclusively). Life cycle of get data are: load data from cache, if cache miss, get data and then save to cache. When save data to cache, can add parameter as tags or lifetime of cache. When cached data be changed, you must clean cache. after then when get data, cache miss and get new data and save this to cache. In Magento, you can clean cache by Cache management page in the Magento Admin or Magento command line. php bin/magento cache:flush php bin/magento cache:clean When declare cache id, you must follow some note: 1. Cache Id must be exclusively (only) 2. Cache Id should contain all parameters which can affect to data cached.","title":"Partial caching"},{"location":"magento/framework/partial_caching/#partial-caching","text":"Magento uses Zend_Cache to interact with the cache storage. However, Magento also has the Magento\\Cache library for implementing Magento-specific caching.","title":"Partial caching"},{"location":"magento/framework/partial_caching/#information-about-caching","text":"Partial caching Create custom cache engines Default Magento after install using cache on file: folder magento use to save info about cache in var/cache and var/page_cache . You can use Magento 2 database for caching. Cached object are stored in the cache and cache_tag . Create a cache type You can create new cache type. Load and save information which you need with this cache type. Cache type can enable, disable, clear using Cache management page in the Magento Admin.","title":"Information about caching"},{"location":"magento/framework/partial_caching/#more-information-about-caching","text":"","title":"More information about caching"},{"location":"magento/framework/partial_caching/#zend-cache","text":"Zend framework has 2 type of cache: Backend and Frontend. Detail more than about Zend Cache at here . Cache backend is the \"cache engine\" : it can be file, memcached, etc. Cache frontend specify what kind of data will be stored in the cache. Caching in Zend Framework is operated by frontends while cache records are stored through backend adapters (File, Sqlite, Memcache...) through a flexible system of IDs and tags. Using those, it is easy to delete specific types of records afterwards (for example: \"delete all cache records marked with a given tag\"). The core of the module (Zend_Cache_Core) is generic, flexible and configurable. Yet, for your specific needs there are cache frontends that extend Zend_Cache_Core for convenience: Output, File, Function and Class.","title":"Zend Cache"},{"location":"magento/framework/partial_caching/#magento-partial-cache","text":"Some folder and file important in magento framework vender/magento/framework/App/Cache vender/magento/framework/App/Cache.php vender/magento/framework/App/CacheInterface.php vender/magento/framework/Cache Folder cache in server magento var/cache var/page_cache Magento\\Framework\\App\\CacheInterface.php contains some function important about cache: Load data from cache by id public function load($identifier); Save data to cache public function save($data, $identifier, $tags = [], $lifeTime = null); Remove cached data by identifier public function remove($identifier); Clean cached data by specific tag public function clean($tags = []); Default Magento use Cm_Cache_Backend_File which much improved replacement for Zend_Cache_Backend_File - works great with Magento! Cached object saved in file with filename contain cache id, content of file contain metadatas and data. $metadatas = array( 'hash' => $hash, 'mtime' => time(), 'expire' => $this->_expireTime($this->getLifetime($specificLifetime)), 'tags' => implode(',', $tags), ); $res = $this->_filePutContents($file, serialize($metadatas).\"\\n\".$data); $res = $res && $this->_updateIdsTags(array($id), $tags, 'merge'); Tags saved in folder var/cache/mage_tags . File name is tag name, content is all cache id which linked to this tag. Cached object data saved in file as string which serialized from data object. Example about load data from cache: vendor/magento/framework/App/ObjectManager/ConfigLoader.php . $cacheId = $area . '::DiConfig'; $data = $this->_cache->load($cacheId); if (!$data) { $data = $this->_getReader()->read($area); $this->_cache->save($this->getSerializer()->serialize($data), $cacheId); } else { $data = $this->getSerializer()->unserialize($data); } return $data; Declare cache id (cache id must is exclusively). Life cycle of get data are: load data from cache, if cache miss, get data and then save to cache. When save data to cache, can add parameter as tags or lifetime of cache. When cached data be changed, you must clean cache. after then when get data, cache miss and get new data and save this to cache. In Magento, you can clean cache by Cache management page in the Magento Admin or Magento command line. php bin/magento cache:flush php bin/magento cache:clean When declare cache id, you must follow some note: 1. Cache Id must be exclusively (only) 2. Cache Id should contain all parameters which can affect to data cached.","title":"Magento Partial Cache"},{"location":"magento/framework/prepare/","text":"Module in Magento \u00b6 Module file structure: \u00b6 <MyModule_repo_root> \u251c\u2500\u2500 Api \u251c\u2500\u2500 Block \u251c\u2500\u2500 Controller \u251c\u2500\u2500 Console \u251c\u2500\u2500 etc \u251c\u2500\u2500 Helper \u251c\u2500\u2500 i18n \u251c\u2500\u2500 Model \u251c\u2500\u2500 Plugin \u251c\u2500\u2500 Test \u251c\u2500\u2500 view \u251c\u2500\u2500 composer.json \u251c\u2500\u2500 LICENSE.txt \u2514\u2500\u2500 ... Common directories \u00b6 Following are some common module directories: Block: contains PHP view classes as part of Model View Controller(MVC) vertical implementation of module logic. Controller: contains PHP controller classes as part of MVC vertical implementation of module logic. etc: contains configuration files; in particular, module.xml, which is required. Model: contains PHP model classes as part of MVC vertical implementation of module logic. Setup: contains classes for module database structure and data setup which are invoked when installing or upgrading. Additional directories \u00b6 Additional folders can be added for configuration and other ancillary functions for items like plugin-ins, localization, and layout files. Api: contains any PHP classes exposed to the API . Console: contains CLI commands. For more info, see Add CLI commands . Cron: contains cron job definitions. Helper: contains aggregated functionality. i18n: contains localization files. Observer: contains files for executing commands from the listener. Plugin: contains any needed plug-ins . UI: contains data generation files. view: contains view files, including static view files, design templates, email templates, and layout files. Theme file structure \u00b6 A typical theme file structure can look like the following: \u251c\u2500\u2500 composer.json \u251c\u2500\u2500 etc \u2502 \u2514\u2500\u2500 view.xml \u251c\u2500\u2500 i18n \u2502 \u2514\u2500\u2500 en_US.csv \u251c\u2500\u2500 LICENSE_AFL.txt \u251c\u2500\u2500 LICENSE.txt \u251c\u2500\u2500 media \u2502 \u2514\u2500\u2500 preview.jpg \u251c\u2500\u2500 registration.php \u2514\u2500\u2500 web \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 email.less \u2502 \u251c\u2500\u2500 print.less \u2502 \u251c\u2500\u2500 source \u2502 \u2502 \u251c\u2500\u2500 _actions-toolbar.less \u2502 \u2502 \u251c\u2500\u2500 _breadcrumbs.less \u2502 \u2502 \u251c\u2500\u2500 _buttons.less \u2502 \u2502 \u251c\u2500\u2500 components \u2502 \u2502 \u2502 \u2514\u2500\u2500 _modals_extend.less \u2502 \u2502 \u251c\u2500\u2500 _icons.less \u2502 \u2502 \u251c\u2500\u2500 _layout.less \u2502 \u2502 \u251c\u2500\u2500 _theme.less \u2502 \u2502 \u251c\u2500\u2500 _tooltips.less \u2502 \u2502 \u251c\u2500\u2500 _typography.less \u2502 \u2502 \u2514\u2500\u2500 _variables.less \u2502 \u251c\u2500\u2500 _styles.less \u2502 \u251c\u2500\u2500 styles-l.less \u2502 \u2514\u2500\u2500 styles-m.less \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 logo.svg \u2514\u2500\u2500 js \u251c\u2500\u2500 navigation-menu.js \u251c\u2500\u2500 responsive.js \u2514\u2500\u2500 theme.js Common directories \u00b6 Typical theme directories are: etc: Contains configuration files such as the view.xml file which contains image configurations for all images and thumbnails. i18n: Translation dictionaries, if any. media: Theme preview images (screen capture of your theme) can be put in here. web: Optional directory that contains static files organized into the following subdirectories: css/source: Contains a theme\u2019s less configuration files that invoke mixins for global elements from the Magento UI library, and the theme.less file that overrides the default variables values. css/source/lib: Contains view files that override the UI library files stored in lib/web/css/source/lib. fonts: The folder to place the different fonts for your theme. images: Static images folder. js: The folder for your JavaScript files. For more details on the theme folder structure, see Magento theme structure . Language package file structure \u00b6 A typical directory structure for three language packages follows: \u251c\u2500\u2500 de_DE \u2502 \u251c\u2500\u2500 composer.json \u2502 \u251c\u2500\u2500 language.xml \u2502 \u251c\u2500\u2500 LICENSE_AFL.txt \u2502 \u251c\u2500\u2500 LICENSE.txt \u2502 \u2514\u2500\u2500 registration.php \u251c\u2500\u2500 en_US \u2502 \u251c\u2500\u2500 composer.json \u2502 \u251c\u2500\u2500 language.xml \u2502 \u251c\u2500\u2500 LICENSE_AFL.txt \u2502 \u251c\u2500\u2500 LICENSE.txt \u2502 \u2514\u2500\u2500 registration.php \u251c\u2500\u2500 pt_BR \u2502 \u251c\u2500\u2500 composer.json \u2502 \u251c\u2500\u2500 language.xml \u2502 \u251c\u2500\u2500 LICENSE_AFL.txt \u2502 \u251c\u2500\u2500 LICENSE.txt \u2502 \u2514\u2500\u2500 registration.php Test suite: \u00b6 <extension_repo_root> \u251c\u2500\u2500 <Module1> \u2502 \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500 Test \u2502 \u2502 \u251c\u2500\u2500 Unit \u2502 \u2502 \u251c\u2500\u2500 Integration \u2502 \u2502 \u2514\u2500\u2500 Mftf \u2502 \u2502 \u251c\u2500\u2500 TestSuite \u2502 \u2502 \u2514\u2500\u2500 composer.json \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 <Module2> \u251c\u2500\u2500 <Module1SampleData> \u2514\u2500\u2500 <Module2SampleData> Extension lifecycle \u00b6 Schema initialization stages InstallSchema UpgradeSchema Recurring Data initialization InstallData UpgradeData RecurringData Database interface Use the ModuleDataSetupInterface when you need to do database manipulations. If your installation or upgrade logic spans multiple classes, pass this resource on to other classes that need to modify the database. Module version Use the ModuleContextInterface to get the current module version and execute logic based on the version. Uninstall Disabled modules Command line \u00b6 Install Command line: php bin/magento setup:install Setup upgrade to install or upgrade module Command line: php bin/magento setup:upgrade More information Setup module on Magento \u00b6 Folder in framework: /setup/src/Magento/Setup/Console/Command/UpgradeCommand.php in function execute File InstallSchema.php in every module. class \\VendorName\\ModuleName\\Setup\\InstallSchema implements \\Magento\\Framework\\Setup\\InstallSchemaInterface { /** * {@inheritdoc} */ public function install(SchemaSetupInterface $setup, ModuleContextInterface $context) { //Install schema logic } } Magento will $installer->installSchema(); and $installer->installDataFixtures(); . $installer as object of class /setup/src/Magento/Setup/Model/Installer.php . In this class, it will call $this->handleDBSchemaData($setup, 'schema'); . Magento will get all module in code which stored in server. With once module, magento will call $upgrader = $this->getSchemaDataHandler($moduleName, $upgradeType); will return object of one of class in extension lifecycle InstallSchema UpgradeSchema Recurring InstallData UpgradeData RecurringData Object return will call function install() if module is first install, else will call function upgrade() of interface of every object. Example: \\InstallSchemaInterface::install() or \\UpgradeDataInterface::upgrade()","title":"Prepare"},{"location":"magento/framework/prepare/#module-in-magento","text":"","title":"Module in Magento"},{"location":"magento/framework/prepare/#module-file-structure","text":"<MyModule_repo_root> \u251c\u2500\u2500 Api \u251c\u2500\u2500 Block \u251c\u2500\u2500 Controller \u251c\u2500\u2500 Console \u251c\u2500\u2500 etc \u251c\u2500\u2500 Helper \u251c\u2500\u2500 i18n \u251c\u2500\u2500 Model \u251c\u2500\u2500 Plugin \u251c\u2500\u2500 Test \u251c\u2500\u2500 view \u251c\u2500\u2500 composer.json \u251c\u2500\u2500 LICENSE.txt \u2514\u2500\u2500 ...","title":"Module file structure:"},{"location":"magento/framework/prepare/#common-directories","text":"Following are some common module directories: Block: contains PHP view classes as part of Model View Controller(MVC) vertical implementation of module logic. Controller: contains PHP controller classes as part of MVC vertical implementation of module logic. etc: contains configuration files; in particular, module.xml, which is required. Model: contains PHP model classes as part of MVC vertical implementation of module logic. Setup: contains classes for module database structure and data setup which are invoked when installing or upgrading.","title":"Common directories"},{"location":"magento/framework/prepare/#additional-directories","text":"Additional folders can be added for configuration and other ancillary functions for items like plugin-ins, localization, and layout files. Api: contains any PHP classes exposed to the API . Console: contains CLI commands. For more info, see Add CLI commands . Cron: contains cron job definitions. Helper: contains aggregated functionality. i18n: contains localization files. Observer: contains files for executing commands from the listener. Plugin: contains any needed plug-ins . UI: contains data generation files. view: contains view files, including static view files, design templates, email templates, and layout files.","title":"Additional directories"},{"location":"magento/framework/prepare/#theme-file-structure","text":"A typical theme file structure can look like the following: \u251c\u2500\u2500 composer.json \u251c\u2500\u2500 etc \u2502 \u2514\u2500\u2500 view.xml \u251c\u2500\u2500 i18n \u2502 \u2514\u2500\u2500 en_US.csv \u251c\u2500\u2500 LICENSE_AFL.txt \u251c\u2500\u2500 LICENSE.txt \u251c\u2500\u2500 media \u2502 \u2514\u2500\u2500 preview.jpg \u251c\u2500\u2500 registration.php \u2514\u2500\u2500 web \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 email.less \u2502 \u251c\u2500\u2500 print.less \u2502 \u251c\u2500\u2500 source \u2502 \u2502 \u251c\u2500\u2500 _actions-toolbar.less \u2502 \u2502 \u251c\u2500\u2500 _breadcrumbs.less \u2502 \u2502 \u251c\u2500\u2500 _buttons.less \u2502 \u2502 \u251c\u2500\u2500 components \u2502 \u2502 \u2502 \u2514\u2500\u2500 _modals_extend.less \u2502 \u2502 \u251c\u2500\u2500 _icons.less \u2502 \u2502 \u251c\u2500\u2500 _layout.less \u2502 \u2502 \u251c\u2500\u2500 _theme.less \u2502 \u2502 \u251c\u2500\u2500 _tooltips.less \u2502 \u2502 \u251c\u2500\u2500 _typography.less \u2502 \u2502 \u2514\u2500\u2500 _variables.less \u2502 \u251c\u2500\u2500 _styles.less \u2502 \u251c\u2500\u2500 styles-l.less \u2502 \u2514\u2500\u2500 styles-m.less \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 logo.svg \u2514\u2500\u2500 js \u251c\u2500\u2500 navigation-menu.js \u251c\u2500\u2500 responsive.js \u2514\u2500\u2500 theme.js","title":"Theme file structure"},{"location":"magento/framework/prepare/#common-directories_1","text":"Typical theme directories are: etc: Contains configuration files such as the view.xml file which contains image configurations for all images and thumbnails. i18n: Translation dictionaries, if any. media: Theme preview images (screen capture of your theme) can be put in here. web: Optional directory that contains static files organized into the following subdirectories: css/source: Contains a theme\u2019s less configuration files that invoke mixins for global elements from the Magento UI library, and the theme.less file that overrides the default variables values. css/source/lib: Contains view files that override the UI library files stored in lib/web/css/source/lib. fonts: The folder to place the different fonts for your theme. images: Static images folder. js: The folder for your JavaScript files. For more details on the theme folder structure, see Magento theme structure .","title":"Common directories"},{"location":"magento/framework/prepare/#language-package-file-structure","text":"A typical directory structure for three language packages follows: \u251c\u2500\u2500 de_DE \u2502 \u251c\u2500\u2500 composer.json \u2502 \u251c\u2500\u2500 language.xml \u2502 \u251c\u2500\u2500 LICENSE_AFL.txt \u2502 \u251c\u2500\u2500 LICENSE.txt \u2502 \u2514\u2500\u2500 registration.php \u251c\u2500\u2500 en_US \u2502 \u251c\u2500\u2500 composer.json \u2502 \u251c\u2500\u2500 language.xml \u2502 \u251c\u2500\u2500 LICENSE_AFL.txt \u2502 \u251c\u2500\u2500 LICENSE.txt \u2502 \u2514\u2500\u2500 registration.php \u251c\u2500\u2500 pt_BR \u2502 \u251c\u2500\u2500 composer.json \u2502 \u251c\u2500\u2500 language.xml \u2502 \u251c\u2500\u2500 LICENSE_AFL.txt \u2502 \u251c\u2500\u2500 LICENSE.txt \u2502 \u2514\u2500\u2500 registration.php","title":"Language package file structure"},{"location":"magento/framework/prepare/#test-suite","text":"<extension_repo_root> \u251c\u2500\u2500 <Module1> \u2502 \u251c\u2500\u2500 ... \u2502 \u251c\u2500\u2500 Test \u2502 \u2502 \u251c\u2500\u2500 Unit \u2502 \u2502 \u251c\u2500\u2500 Integration \u2502 \u2502 \u2514\u2500\u2500 Mftf \u2502 \u2502 \u251c\u2500\u2500 TestSuite \u2502 \u2502 \u2514\u2500\u2500 composer.json \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 <Module2> \u251c\u2500\u2500 <Module1SampleData> \u2514\u2500\u2500 <Module2SampleData>","title":"Test suite:"},{"location":"magento/framework/prepare/#extension-lifecycle","text":"Schema initialization stages InstallSchema UpgradeSchema Recurring Data initialization InstallData UpgradeData RecurringData Database interface Use the ModuleDataSetupInterface when you need to do database manipulations. If your installation or upgrade logic spans multiple classes, pass this resource on to other classes that need to modify the database. Module version Use the ModuleContextInterface to get the current module version and execute logic based on the version. Uninstall Disabled modules","title":"Extension lifecycle"},{"location":"magento/framework/prepare/#command-line","text":"Install Command line: php bin/magento setup:install Setup upgrade to install or upgrade module Command line: php bin/magento setup:upgrade","title":"Command line"},{"location":"magento/framework/prepare/#more-information-setup-module-on-magento","text":"Folder in framework: /setup/src/Magento/Setup/Console/Command/UpgradeCommand.php in function execute File InstallSchema.php in every module. class \\VendorName\\ModuleName\\Setup\\InstallSchema implements \\Magento\\Framework\\Setup\\InstallSchemaInterface { /** * {@inheritdoc} */ public function install(SchemaSetupInterface $setup, ModuleContextInterface $context) { //Install schema logic } } Magento will $installer->installSchema(); and $installer->installDataFixtures(); . $installer as object of class /setup/src/Magento/Setup/Model/Installer.php . In this class, it will call $this->handleDBSchemaData($setup, 'schema'); . Magento will get all module in code which stored in server. With once module, magento will call $upgrader = $this->getSchemaDataHandler($moduleName, $upgradeType); will return object of one of class in extension lifecycle InstallSchema UpgradeSchema Recurring InstallData UpgradeData RecurringData Object return will call function install() if module is first install, else will call function upgrade() of interface of every object. Example: \\InstallSchemaInterface::install() or \\UpgradeDataInterface::upgrade()","title":"More information Setup module on Magento"},{"location":"magento/sample/tags_input_magento2/","text":"Magento 2.1 Ui Component form field Tags Input \u00b6 Everything is possible with UI Components because it's really flexible as its introductions. Otherwise, I don't think depending/overriding on default UI element (like you mentioned in the post - ui-select) is a good idea. So, in this tutorial, I will create a new UI element for the tags. It could be use not only in product form but the cms page form or whatever depends on the UI forms. Now let the fun begin! Firstly, your ui_component form should looks like this: StackOverflow/Catalog/view/adminhtml/ui_component/product_form.xml <field name= \"parent\" > <argument name= \"data\" xsi:type= \"array\" > <item name= \"config\" xsi:type= \"array\" > <item name= \"label\" xsi:type= \"string\" translate= \"true\" > Tags </item> <item name= \"componentType\" xsi:type= \"string\" > field </item> <item name= \"formElement\" xsi:type= \"string\" > input </item> <item name= \"component\" xsi:type= \"string\" > StackOverflow_Catalog/js/form/element/tags </item> <item name= \"elementTmpl\" xsi:type= \"string\" > StackOverflow_Catalog/form/element/tags </item> <item name= \"dataScope\" xsi:type= \"string\" > data.parent </item> <item name= \"filterOptions\" xsi:type= \"boolean\" > true </item> <item name= \"showCheckbox\" xsi:type= \"boolean\" > false </item> <item name= \"disableLabel\" xsi:type= \"boolean\" > true </item> <item name= \"levelsVisibility\" xsi:type= \"number\" > 1 </item> <item name= \"sortOrder\" xsi:type= \"number\" > 20 </item> <item name= \"required\" xsi:type= \"boolean\" > true </item> <item name= \"validation\" xsi:type= \"array\" > <item name= \"required-entry\" xsi:type= \"boolean\" > true </item> </item> <item name= \"listens\" xsi:type= \"array\" > <item name= \"${ $.namespace }.${ $.namespace }:responseData\" xsi:type= \"string\" > setParsed </item> </item> </item> </argument> </field> Take a note to formElement, component and elementTmpl. It should be a normal input field. Now, we need to create the view renderer for that UI element: StackOverflow/Catalog/view/base/web/js/form/element/tags.js define ([ 'underscore' , 'mageUtils' , 'Magento_Ui/js/form/element/abstract' , 'ko' , 'Magento_Ui/js/lib/validation/validator' ], function ( _ , utils , Element , ko , validator ) { 'use strict' ; return Element . extend ({ defaults : { list : ([]), valueUpdate : 'afterkeydown' , listens : { 'valueArea' : 'onUpdateArea' } }, initialize : function () { this . _super (); this . on ( 'value' , this . onUpdateArea . bind ( this )); var self = this ; var list = this . value (). split ( ',' ); _ . each ( list , function ( value , index ) { if ( value . length > 0 ) { self . list . push ( value . trim ()); } }); return this ; }, initObservable : function () { this . _super (); this . observe ([ 'valueArea' ]); this . observe ( 'list' , this . list ); return this ; }, onUpdateArea : function ( value ) { if ( value . length > 1 ) { if ( value . indexOf ( ',' ) !== - 1 || value . indexOf ( ' ' ) !== - 1 ) { var newValue = value . slice ( 0 , - 1 ); this . correctValue ( newValue ); } } }, correctValue : function ( tag ) { if ( this . hasTag ( tag )) { this . valueArea ( '' ); return false ; } if ( this . isValidTag ( tag ). passed ) { this . list . push ( tag ); this . joinList ( this . list ()); this . valueArea ( '' ); return true ; } return false ; }, isValidTag : function ( tag ) { return validator ( 'validate-alphanum' , tag ); }, OnBlurEvent : function ( object ) { if ( this . valueArea () && this . valueArea (). length > 0 ) { if ( ! this . correctValue ( this . valueArea ())) { this . valueArea ( '' ); } } }, deleteTag : function ( self , value , event ) { event ? event . stopPropagation () : false ; var key = - 1 ; _ . each ( this . list (), function ( element , index ) { if ( value === element ) { key = index ; } }); if ( key > - 1 ) { this . list . splice ( key , 1 ); this . joinList ( this . list ()); this . valueArea ( '' ); } }, joinList : function ( array ) { this . value ( array . join ( ',' )); }, hasTag : function ( value ) { return this . list (). indexOf ( value ) !== - 1 ; } }); }); the knockout template is on the way... StackOverflow/Catalog/view/base/web/template/form/element/tags.html < div class = \"tags\" > < div class = \"admin__control-text\" > < div class = \"apps-share-chips-editor\" > < input class = \"admin__control-text\" type = \"hidden\" data-bind = \" value: value, valueUpdate: valueUpdate, attr: { name: inputName, placeholder: placeholder, 'aria-describedby': noticeId, id: uid, disabled: disabled }\" /> < span data-bind = \"foreach: { data: list, as: 'item' }\" > < span class = \"field-tag-chip\" > < div class = \"field-tag-content\" data-bind = \"text: item\" ></ div > < div class = \"field-tag-close-before\" > < span class = \"field-tag-close\" data-bind = \"event: {click: $parent.deleteTag.bind($parent, $index)}\" ></ span > </ div > </ span > </ span > < textarea class = \"field-tag-input\" placeholder = \"Add more tags...\" data-bind = \" event: {change: userChanges, blur: OnBlurEvent}, hasFocus: focused, valueUpdate: valueUpdate, value: valueArea \" ></ textarea > </ div > </ div > </ div > some styling maybe?... StackOverflow/Catalog/view/base/web/css/tags.css . field-tag-content { display : inline-block ; overflow : hidden ; text-overflow : ellipsis ; vertical-align : middle ; white-space : nowrap ; } . field-tag-chip { background : #e0e0e0 ; border : 1 px solid #e0e0e0 ; display : inline-block ; -webkit- border-radius : 3 px ; color : #444 ; margin : 4 px 1 px 0 2 px ; outline : none ; vertical-align : middle ; cursor : default ; padding : 0 ; -webkit- border-radius : 2 px ; border-radius : 2 px ; overflow : hidden ; padding : 5 px ; padding-right : 25 px ; } . field-tag-input { display : inline-block ; margin : 10 px 4 px 0 4 px ; vertical-align : middle ; background : none ; border : 0 ; height : 25 px ; outline : 0 ; overflow-x : hidden ; overflow-y : auto ; padding : 0 0 0 5 px ; position : relative ; resize : none ; width : 50 % ; } . field-tag-close-before { position : relative ; } . field-tag-close { position : absolute ; top : -10 px ; right : -5 px ; cursor : pointer ; } . field-tag-close : before , . field-tag-close : after { content : \"\" ; position : absolute ; top : 0 px ; left : 0 px ; width : 15 px ; height : 4 px ; background : #303030 ; } . field-tag-close : before { webkit-transform : rotate ( 45 deg ); transform : rotate ( 45 deg ); } . field-tag-close : after { webkit-transform : rotate ( -45 deg ); transform : rotate ( -45 deg ); } And finally, you will need to add your tags.css to the view/adminhtml/layout/catalog_product_edit.xml and the view/adminhtml/layout/catalog_product_new.xml . So that it's it! Now your input should look like this:","title":"Magento 2 - Tags Input"},{"location":"magento/sample/tags_input_magento2/#magento-21-ui-component-form-field-tags-input","text":"Everything is possible with UI Components because it's really flexible as its introductions. Otherwise, I don't think depending/overriding on default UI element (like you mentioned in the post - ui-select) is a good idea. So, in this tutorial, I will create a new UI element for the tags. It could be use not only in product form but the cms page form or whatever depends on the UI forms. Now let the fun begin! Firstly, your ui_component form should looks like this: StackOverflow/Catalog/view/adminhtml/ui_component/product_form.xml <field name= \"parent\" > <argument name= \"data\" xsi:type= \"array\" > <item name= \"config\" xsi:type= \"array\" > <item name= \"label\" xsi:type= \"string\" translate= \"true\" > Tags </item> <item name= \"componentType\" xsi:type= \"string\" > field </item> <item name= \"formElement\" xsi:type= \"string\" > input </item> <item name= \"component\" xsi:type= \"string\" > StackOverflow_Catalog/js/form/element/tags </item> <item name= \"elementTmpl\" xsi:type= \"string\" > StackOverflow_Catalog/form/element/tags </item> <item name= \"dataScope\" xsi:type= \"string\" > data.parent </item> <item name= \"filterOptions\" xsi:type= \"boolean\" > true </item> <item name= \"showCheckbox\" xsi:type= \"boolean\" > false </item> <item name= \"disableLabel\" xsi:type= \"boolean\" > true </item> <item name= \"levelsVisibility\" xsi:type= \"number\" > 1 </item> <item name= \"sortOrder\" xsi:type= \"number\" > 20 </item> <item name= \"required\" xsi:type= \"boolean\" > true </item> <item name= \"validation\" xsi:type= \"array\" > <item name= \"required-entry\" xsi:type= \"boolean\" > true </item> </item> <item name= \"listens\" xsi:type= \"array\" > <item name= \"${ $.namespace }.${ $.namespace }:responseData\" xsi:type= \"string\" > setParsed </item> </item> </item> </argument> </field> Take a note to formElement, component and elementTmpl. It should be a normal input field. Now, we need to create the view renderer for that UI element: StackOverflow/Catalog/view/base/web/js/form/element/tags.js define ([ 'underscore' , 'mageUtils' , 'Magento_Ui/js/form/element/abstract' , 'ko' , 'Magento_Ui/js/lib/validation/validator' ], function ( _ , utils , Element , ko , validator ) { 'use strict' ; return Element . extend ({ defaults : { list : ([]), valueUpdate : 'afterkeydown' , listens : { 'valueArea' : 'onUpdateArea' } }, initialize : function () { this . _super (); this . on ( 'value' , this . onUpdateArea . bind ( this )); var self = this ; var list = this . value (). split ( ',' ); _ . each ( list , function ( value , index ) { if ( value . length > 0 ) { self . list . push ( value . trim ()); } }); return this ; }, initObservable : function () { this . _super (); this . observe ([ 'valueArea' ]); this . observe ( 'list' , this . list ); return this ; }, onUpdateArea : function ( value ) { if ( value . length > 1 ) { if ( value . indexOf ( ',' ) !== - 1 || value . indexOf ( ' ' ) !== - 1 ) { var newValue = value . slice ( 0 , - 1 ); this . correctValue ( newValue ); } } }, correctValue : function ( tag ) { if ( this . hasTag ( tag )) { this . valueArea ( '' ); return false ; } if ( this . isValidTag ( tag ). passed ) { this . list . push ( tag ); this . joinList ( this . list ()); this . valueArea ( '' ); return true ; } return false ; }, isValidTag : function ( tag ) { return validator ( 'validate-alphanum' , tag ); }, OnBlurEvent : function ( object ) { if ( this . valueArea () && this . valueArea (). length > 0 ) { if ( ! this . correctValue ( this . valueArea ())) { this . valueArea ( '' ); } } }, deleteTag : function ( self , value , event ) { event ? event . stopPropagation () : false ; var key = - 1 ; _ . each ( this . list (), function ( element , index ) { if ( value === element ) { key = index ; } }); if ( key > - 1 ) { this . list . splice ( key , 1 ); this . joinList ( this . list ()); this . valueArea ( '' ); } }, joinList : function ( array ) { this . value ( array . join ( ',' )); }, hasTag : function ( value ) { return this . list (). indexOf ( value ) !== - 1 ; } }); }); the knockout template is on the way... StackOverflow/Catalog/view/base/web/template/form/element/tags.html < div class = \"tags\" > < div class = \"admin__control-text\" > < div class = \"apps-share-chips-editor\" > < input class = \"admin__control-text\" type = \"hidden\" data-bind = \" value: value, valueUpdate: valueUpdate, attr: { name: inputName, placeholder: placeholder, 'aria-describedby': noticeId, id: uid, disabled: disabled }\" /> < span data-bind = \"foreach: { data: list, as: 'item' }\" > < span class = \"field-tag-chip\" > < div class = \"field-tag-content\" data-bind = \"text: item\" ></ div > < div class = \"field-tag-close-before\" > < span class = \"field-tag-close\" data-bind = \"event: {click: $parent.deleteTag.bind($parent, $index)}\" ></ span > </ div > </ span > </ span > < textarea class = \"field-tag-input\" placeholder = \"Add more tags...\" data-bind = \" event: {change: userChanges, blur: OnBlurEvent}, hasFocus: focused, valueUpdate: valueUpdate, value: valueArea \" ></ textarea > </ div > </ div > </ div > some styling maybe?... StackOverflow/Catalog/view/base/web/css/tags.css . field-tag-content { display : inline-block ; overflow : hidden ; text-overflow : ellipsis ; vertical-align : middle ; white-space : nowrap ; } . field-tag-chip { background : #e0e0e0 ; border : 1 px solid #e0e0e0 ; display : inline-block ; -webkit- border-radius : 3 px ; color : #444 ; margin : 4 px 1 px 0 2 px ; outline : none ; vertical-align : middle ; cursor : default ; padding : 0 ; -webkit- border-radius : 2 px ; border-radius : 2 px ; overflow : hidden ; padding : 5 px ; padding-right : 25 px ; } . field-tag-input { display : inline-block ; margin : 10 px 4 px 0 4 px ; vertical-align : middle ; background : none ; border : 0 ; height : 25 px ; outline : 0 ; overflow-x : hidden ; overflow-y : auto ; padding : 0 0 0 5 px ; position : relative ; resize : none ; width : 50 % ; } . field-tag-close-before { position : relative ; } . field-tag-close { position : absolute ; top : -10 px ; right : -5 px ; cursor : pointer ; } . field-tag-close : before , . field-tag-close : after { content : \"\" ; position : absolute ; top : 0 px ; left : 0 px ; width : 15 px ; height : 4 px ; background : #303030 ; } . field-tag-close : before { webkit-transform : rotate ( 45 deg ); transform : rotate ( 45 deg ); } . field-tag-close : after { webkit-transform : rotate ( -45 deg ); transform : rotate ( -45 deg ); } And finally, you will need to add your tags.css to the view/adminhtml/layout/catalog_product_edit.xml and the view/adminhtml/layout/catalog_product_new.xml . So that it's it! Now your input should look like this:","title":"Magento 2.1 Ui Component form field Tags Input"},{"location":"magento/test/functional/","text":"Overview \u00b6 This is our developer docs about Testing Functional of Magento . Installation Test Run Create a Test - Theory Create a Test - Practice Functional Testing Framework Entities","title":"Overview"},{"location":"magento/test/functional/#overview","text":"This is our developer docs about Testing Functional of Magento . Installation Test Run Create a Test - Theory Create a Test - Practice Functional Testing Framework Entities","title":"Overview"},{"location":"magento/test/functional/create_test_practice/","text":"Test creation \u00b6 Create the testing object - a fixture \u00b6 Use a generateFixtureXml.php to create a new fixture. cd <magento2_root_dir>/dev/tests/functional/utils php -f generateFixtureXml.php -- --name synonym --entity_type search_synonyms --collection Magento \\\\ Search \\\\ Model \\\\ ResourceModel \\\\ Query \\\\ Collection Parameter Value Explanation --name synonym A name of the fixture. It can have any name. synonym seems to be logical. --entity_type search_synonyms Database table name where entity data is stored. You can track database input when you perform a manual testing. A new record will be created in a table that you need. --collection Magento\\Search\\Model\\ResourceModel\\Query\\Collection Collection to generate data sets. Synonyms are the entities of a Magento_Search module. A collection can always be found in model resources. As a result of previous commands, a brand new fixture can be found in the /dev/tests/functional/tests/app/Magento/Search/Test/Fixture directory. https://devdocs.magento.com/guides/v2.2/mtf/create_test/create_new_test.html Now we should change the fixture. Instead of store_id and website_id, we must use scope_id with the Magento\\Search\\Test\\Fixture\\Synonym\\ScopeId data source class. Create the initial test case \u00b6 From the test case topic we know about the structure, location and name of the test case. In this example it is named CreateSynonymEntityTest.php and stored in /dev/tests/functional/tests/app/Magento/Search/Test/TestCase. We can code the initialization of these pages in the test using an __inject() method of the Magento\\Mtf\\TestCase\\Injectable class. The pages will be created in Step 5. Also, we will use the fixture from the Step 2. <?php namespace Magento\\Search\\Test\\TestCase ; use Magento\\Mtf\\TestCase\\Injectable ; use Magento\\Search\\Test\\Fixture\\Synonym ; /** * Steps: * 1. Log in to Admin. * 2. Open the Search Synonym page. * 3. Click the \"New Synonym Group\" button. * 4. Enter data according to a data set. For each variation, the synonyms must have unique identifiers. * 5. Click the \"Save Synonym Group\" button. * 6. Verify the synonym group saved successfully. */ class CreateSynonymEntityTest extends Injectable { /** * Search Synonyms Index page. * * @var SynonymsIndex */ private $synonymsIndex ; /** * New Synonym Group page. * * @var SynonymsNew */ private $synonymsNew ; /** * Inject synonym pages. * * @param SynonymsIndex $synonymsIndex * @param SynonymsNew $synonymsNew * @return void */ public function __inject ( SynonymsIndex $synonymsIndex , SynonymsNew $synonymsNew ) { $this -> synonymsIndex = $synonymsIndex ; $this -> synonymsNew = $synonymsNew ; } /** * Create Synonym group test. * * @param Synonym $synonym * @return void */ public function test ( Synonym $synonym ) { // Steps } } Create the data set \u00b6 Now we can add a data set with variations that cover cases in the test description: /dev/tests/functional/tests/app/Magento/Search/Test/TestCase/CreateSynonymEntityTest.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../../../../vendor/magento/mtf/etc/variations.xsd\" > <testCase name= \"Magento\\Search\\Test\\TestCase\\CreateSynonymEntityTest\" summary= \"Create Synonyms\" ticketId= \"MAGETWO-23022016\" > <variation name= \"CreateCategoryEntityTestVariation1_all_websites_all_store_views\" summary= \"Create synonym for all websites and all store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> </variation> <variation name= \"CreateCategoryEntityTestVariation2_main_website_all_store_views\" summary= \"Create synonyms for main website and all store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> <data name= \"synonym/data/scope_id/dataset\" xsi:type= \"string\" > all_store_views </data> </variation> <variation name= \"CreateCategoryEntityTestVariation3_main_website_default_store_view\" summary= \"Create synonyms for main website and default store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> <data name= \"synonym/data/scope_id/dataset\" xsi:type= \"string\" > default_store_view </data> </variation> </testCase> </config> Create the pages \u00b6 In Step 3, we added two pages to the test case class. Because both pages are in the Admin area, we should create them in the /dev/tests/functional/tests/app/Magento/Search/Test/Page/Adminhtml directory. SynonymsIndex.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../../../../../vendor/magento/mtf/etc/pages.xsd\" > <page name= \"SynonymsIndex\" area= \"Adminhtml\" mca= \"search/synonyms/index\" module= \"Magento_Search\" > <block ... /> </page> </config> To generate PHP classes for these pages enter and run in your terminal php <magento2_root_dir>/dev/tests/functional/utils/generate.php Create the blocks \u00b6 How to code \u2018Click the \u201cNew Synonym Group\u201d button\u2019 Fortunately, you already have a block that contains a method to add a new entity in a grid: \\Magento\\Backend\\Test\\Block\\GridPageActions. <?php /** * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved. * See COPYING.txt for license details. */ namespace Magento\\Backend\\Test\\Block ; /** * Class GridPageActions * Grid page actions block */ class GridPageActions extends PageActions { /** * \"Add New\" button * * @var string */ protected $addNewButton = '#add' ; /** * \"Create Store\" button selector * * @var string */ protected $createStoreButton = '#add_group' ; /** * Click on \"Add New\" button * * @return void */ public function addNew () { $this -> _rootElement -> find ( $this -> addNewButton ) -> click (); } /** * Click on \"Create Store\" button * * @return void */ public function createStoreGroup () { $this -> _rootElement -> find ( $this -> createStoreButton ) -> click (); } } In HTML page, to locate the UI block that contains a button, we will use a .page-main-actions locator. Learn how to define a locator. The SynonymsIndex.xml page must contain the following block to be able to run the method in a test case. <?xml version=\"1.0\" encoding=\"utf-8\"?> <config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../../../../../vendor/magento/mtf/etc/pages.xsd\" > <page name= \"SynonymsIndex\" area= \"Adminhtml\" mca= \"search/synonyms/index\" module= \"Magento_Search\" > <block name= \"pageActionsBlock\" class= \"Magento\\Backend\\Test\\Block\\GridPageActions\" locator= \".page-main-actions\" strategy= \"css selector\" /> </page> </config> Form mapping \u00b6 Learn about form mapping.. Add the blocks to pages \u00b6 To associate methods with pages, blocks must be added to pages. Search Synonym page A corresponding page object in a functional test is /dev/tests/functional/tests/app/Magento/Search/Test/Page/Adminhtml/SynonymsIndex.xml The page with a block: <?xml version=\"1.0\" encoding=\"utf-8\"?> <config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../../../../../vendor/magento/mtf/etc/pages.xsd\" > <page name= \"SynonymsIndex\" area= \"Adminhtml\" mca= \"search/synonyms/index\" module= \"Magento_Search\" > <block name= \"pageActionsBlock\" class= \"Magento\\Backend\\Test\\Block\\GridPageActions\" locator= \".page-main-actions\" strategy= \"css selector\" /> </page> </config> To generate PHP classes for these pages, enter the following command from your terminal. php <magento2_root_dir>/dev/tests/functional/utils/generate.php Define the test() method \u00b6 <?php namespace Magento\\Search\\Test\\TestCase ; use Magento\\Mtf\\TestCase\\Injectable ; use Magento\\Search\\Test\\Fixture\\Synonym ; use Magento\\Search\\Test\\Page\\Adminhtml\\SynonymsIndex ; use Magento\\Search\\Test\\Page\\Adminhtml\\SynonymsNew ; /** * Steps: * 1. Log in to Admin. * 2. Open the Search Synonym page. * 3. Click the \"New Synonym Group\" button. * 4. Enter data according to a data set. For each variation, the synonyms must have unique identifiers. * 5. Click the \"Save Synonym Group\" button. * 6. Verify the synonym group saved successfully */ class CreateSynonymEntityTest extends Injectable { /** * Search Synonyms Index page. * * @var SynonymsIndex */ private $synonymsIndex ; /** * New Synonym Group page. * * @var SynonymsNew */ private $synonymsNew ; /** * Inject pages. * * @param SynonymsIndex $synonymsIndex * @param SynonymsNew $synonymsNew * @return void */ public function __inject ( SynonymsIndex $synonymsIndex , SynonymsNew $synonymsNew ) { $this -> synonymsIndex = $synonymsIndex ; $this -> synonymsNew = $synonymsNew ; } /** * Create Synonym group test. * * @param Synonym $synonym * @return void */ public function test ( Synonym $synonym ) { // Steps $this -> synonymsIndex -> open (); $this -> synonymsIndex -> getPageActionsBlock () -> addNew (); $this -> synonymsNew -> getSynonymForm () -> fill ( $synonym ); $this -> synonymsNew -> getFormPageActions () -> save (); } } Create the assertion \u00b6 By making a simple change, we can create a constraint class that is needed \\Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage <?php /** * Copyright \u00a9 2015 Magento. All rights reserved. * See COPYING.txt for license details. */ namespace Magento\\Customer\\Test\\Constraint ; use Magento\\Customer\\Test\\Page\\Adminhtml\\CustomerIndex ; use Magento\\Mtf\\Constraint\\AbstractConstraint ; /** * Assertion to check Customer success save message. */ class AssertCustomerSuccessSaveMessage extends AbstractConstraint { const SUCCESS_MESSAGE = 'You saved the customer.' ; /** * Assert that success message is displayed after customer save. * * @param CustomerIndex $pageCustomerIndex * @return void */ public function processAssert ( CustomerIndex $pageCustomerIndex ) { $actualMessage = $pageCustomerIndex -> getMessagesBlock () -> getSuccessMessage (); \\PHPUnit_Framework_Assert :: assertEquals ( self :: SUCCESS_MESSAGE , $actualMessage , 'Wrong success message is displayed.' . \" \\n Expected: \" . self :: SUCCESS_MESSAGE . \" \\n Actual: \" . $actualMessage ); } /** * Text success save message is displayed. * * @return string */ public function toString () { return 'Assert that success message is displayed.' ; } } And now we can add to each variation of a data set /dev/tests/functional/tests/app/Magento/Search/Test/TestCase/CreateSynonymEntityTest.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../../../../vendor/magento/mtf/etc/variations.xsd\" > <testCase name= \"Magento\\Search\\Test\\TestCase\\CreateSynonymEntityTest\" summary= \"Create Synonyms\" ticketId= \"MAGETWO-23022016\" > <variation name= \"CreateCategoryEntityTestVariation1_all_websites_all_store_views\" summary= \"Create synonym for all websites and all store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> <constraint name= \"Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage\" /> </variation> <variation name= \"CreateCategoryEntityTestVariation2_main_website_all_store_views\" summary= \"Create synonyms for main website and all store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> <data name= \"synonym/data/scope_id/dataset\" xsi:type= \"string\" > all_store_views </data> <constraint name= \"Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage\" /> </variation> <variation name= \"CreateCategoryEntityTestVariation3_main_website_default_store_view\" summary= \"Create synonyms for main website and default store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> <data name= \"synonym/data/scope_id/dataset\" xsi:type= \"string\" > default_store_view </data> <constraint name= \"Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage\" /> </variation> </testCase> </config>","title":"Create a Test - Practice"},{"location":"magento/test/functional/create_test_practice/#test-creation","text":"","title":"Test creation"},{"location":"magento/test/functional/create_test_practice/#create-the-testing-object-a-fixture","text":"Use a generateFixtureXml.php to create a new fixture. cd <magento2_root_dir>/dev/tests/functional/utils php -f generateFixtureXml.php -- --name synonym --entity_type search_synonyms --collection Magento \\\\ Search \\\\ Model \\\\ ResourceModel \\\\ Query \\\\ Collection Parameter Value Explanation --name synonym A name of the fixture. It can have any name. synonym seems to be logical. --entity_type search_synonyms Database table name where entity data is stored. You can track database input when you perform a manual testing. A new record will be created in a table that you need. --collection Magento\\Search\\Model\\ResourceModel\\Query\\Collection Collection to generate data sets. Synonyms are the entities of a Magento_Search module. A collection can always be found in model resources. As a result of previous commands, a brand new fixture can be found in the /dev/tests/functional/tests/app/Magento/Search/Test/Fixture directory. https://devdocs.magento.com/guides/v2.2/mtf/create_test/create_new_test.html Now we should change the fixture. Instead of store_id and website_id, we must use scope_id with the Magento\\Search\\Test\\Fixture\\Synonym\\ScopeId data source class.","title":"Create the testing object - a fixture"},{"location":"magento/test/functional/create_test_practice/#create-the-initial-test-case","text":"From the test case topic we know about the structure, location and name of the test case. In this example it is named CreateSynonymEntityTest.php and stored in /dev/tests/functional/tests/app/Magento/Search/Test/TestCase. We can code the initialization of these pages in the test using an __inject() method of the Magento\\Mtf\\TestCase\\Injectable class. The pages will be created in Step 5. Also, we will use the fixture from the Step 2. <?php namespace Magento\\Search\\Test\\TestCase ; use Magento\\Mtf\\TestCase\\Injectable ; use Magento\\Search\\Test\\Fixture\\Synonym ; /** * Steps: * 1. Log in to Admin. * 2. Open the Search Synonym page. * 3. Click the \"New Synonym Group\" button. * 4. Enter data according to a data set. For each variation, the synonyms must have unique identifiers. * 5. Click the \"Save Synonym Group\" button. * 6. Verify the synonym group saved successfully. */ class CreateSynonymEntityTest extends Injectable { /** * Search Synonyms Index page. * * @var SynonymsIndex */ private $synonymsIndex ; /** * New Synonym Group page. * * @var SynonymsNew */ private $synonymsNew ; /** * Inject synonym pages. * * @param SynonymsIndex $synonymsIndex * @param SynonymsNew $synonymsNew * @return void */ public function __inject ( SynonymsIndex $synonymsIndex , SynonymsNew $synonymsNew ) { $this -> synonymsIndex = $synonymsIndex ; $this -> synonymsNew = $synonymsNew ; } /** * Create Synonym group test. * * @param Synonym $synonym * @return void */ public function test ( Synonym $synonym ) { // Steps } }","title":"Create the initial test case"},{"location":"magento/test/functional/create_test_practice/#create-the-data-set","text":"Now we can add a data set with variations that cover cases in the test description: /dev/tests/functional/tests/app/Magento/Search/Test/TestCase/CreateSynonymEntityTest.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../../../../vendor/magento/mtf/etc/variations.xsd\" > <testCase name= \"Magento\\Search\\Test\\TestCase\\CreateSynonymEntityTest\" summary= \"Create Synonyms\" ticketId= \"MAGETWO-23022016\" > <variation name= \"CreateCategoryEntityTestVariation1_all_websites_all_store_views\" summary= \"Create synonym for all websites and all store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> </variation> <variation name= \"CreateCategoryEntityTestVariation2_main_website_all_store_views\" summary= \"Create synonyms for main website and all store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> <data name= \"synonym/data/scope_id/dataset\" xsi:type= \"string\" > all_store_views </data> </variation> <variation name= \"CreateCategoryEntityTestVariation3_main_website_default_store_view\" summary= \"Create synonyms for main website and default store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> <data name= \"synonym/data/scope_id/dataset\" xsi:type= \"string\" > default_store_view </data> </variation> </testCase> </config>","title":"Create the data set"},{"location":"magento/test/functional/create_test_practice/#create-the-pages","text":"In Step 3, we added two pages to the test case class. Because both pages are in the Admin area, we should create them in the /dev/tests/functional/tests/app/Magento/Search/Test/Page/Adminhtml directory. SynonymsIndex.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../../../../../vendor/magento/mtf/etc/pages.xsd\" > <page name= \"SynonymsIndex\" area= \"Adminhtml\" mca= \"search/synonyms/index\" module= \"Magento_Search\" > <block ... /> </page> </config> To generate PHP classes for these pages enter and run in your terminal php <magento2_root_dir>/dev/tests/functional/utils/generate.php","title":"Create the pages"},{"location":"magento/test/functional/create_test_practice/#create-the-blocks","text":"How to code \u2018Click the \u201cNew Synonym Group\u201d button\u2019 Fortunately, you already have a block that contains a method to add a new entity in a grid: \\Magento\\Backend\\Test\\Block\\GridPageActions. <?php /** * Copyright \u00a9 2013-2017 Magento, Inc. All rights reserved. * See COPYING.txt for license details. */ namespace Magento\\Backend\\Test\\Block ; /** * Class GridPageActions * Grid page actions block */ class GridPageActions extends PageActions { /** * \"Add New\" button * * @var string */ protected $addNewButton = '#add' ; /** * \"Create Store\" button selector * * @var string */ protected $createStoreButton = '#add_group' ; /** * Click on \"Add New\" button * * @return void */ public function addNew () { $this -> _rootElement -> find ( $this -> addNewButton ) -> click (); } /** * Click on \"Create Store\" button * * @return void */ public function createStoreGroup () { $this -> _rootElement -> find ( $this -> createStoreButton ) -> click (); } } In HTML page, to locate the UI block that contains a button, we will use a .page-main-actions locator. Learn how to define a locator. The SynonymsIndex.xml page must contain the following block to be able to run the method in a test case. <?xml version=\"1.0\" encoding=\"utf-8\"?> <config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../../../../../vendor/magento/mtf/etc/pages.xsd\" > <page name= \"SynonymsIndex\" area= \"Adminhtml\" mca= \"search/synonyms/index\" module= \"Magento_Search\" > <block name= \"pageActionsBlock\" class= \"Magento\\Backend\\Test\\Block\\GridPageActions\" locator= \".page-main-actions\" strategy= \"css selector\" /> </page> </config>","title":"Create the blocks"},{"location":"magento/test/functional/create_test_practice/#form-mapping","text":"Learn about form mapping..","title":"Form mapping"},{"location":"magento/test/functional/create_test_practice/#add-the-blocks-to-pages","text":"To associate methods with pages, blocks must be added to pages. Search Synonym page A corresponding page object in a functional test is /dev/tests/functional/tests/app/Magento/Search/Test/Page/Adminhtml/SynonymsIndex.xml The page with a block: <?xml version=\"1.0\" encoding=\"utf-8\"?> <config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../../../../../vendor/magento/mtf/etc/pages.xsd\" > <page name= \"SynonymsIndex\" area= \"Adminhtml\" mca= \"search/synonyms/index\" module= \"Magento_Search\" > <block name= \"pageActionsBlock\" class= \"Magento\\Backend\\Test\\Block\\GridPageActions\" locator= \".page-main-actions\" strategy= \"css selector\" /> </page> </config> To generate PHP classes for these pages, enter the following command from your terminal. php <magento2_root_dir>/dev/tests/functional/utils/generate.php","title":"Add the blocks to pages"},{"location":"magento/test/functional/create_test_practice/#define-the-test-method","text":"<?php namespace Magento\\Search\\Test\\TestCase ; use Magento\\Mtf\\TestCase\\Injectable ; use Magento\\Search\\Test\\Fixture\\Synonym ; use Magento\\Search\\Test\\Page\\Adminhtml\\SynonymsIndex ; use Magento\\Search\\Test\\Page\\Adminhtml\\SynonymsNew ; /** * Steps: * 1. Log in to Admin. * 2. Open the Search Synonym page. * 3. Click the \"New Synonym Group\" button. * 4. Enter data according to a data set. For each variation, the synonyms must have unique identifiers. * 5. Click the \"Save Synonym Group\" button. * 6. Verify the synonym group saved successfully */ class CreateSynonymEntityTest extends Injectable { /** * Search Synonyms Index page. * * @var SynonymsIndex */ private $synonymsIndex ; /** * New Synonym Group page. * * @var SynonymsNew */ private $synonymsNew ; /** * Inject pages. * * @param SynonymsIndex $synonymsIndex * @param SynonymsNew $synonymsNew * @return void */ public function __inject ( SynonymsIndex $synonymsIndex , SynonymsNew $synonymsNew ) { $this -> synonymsIndex = $synonymsIndex ; $this -> synonymsNew = $synonymsNew ; } /** * Create Synonym group test. * * @param Synonym $synonym * @return void */ public function test ( Synonym $synonym ) { // Steps $this -> synonymsIndex -> open (); $this -> synonymsIndex -> getPageActionsBlock () -> addNew (); $this -> synonymsNew -> getSynonymForm () -> fill ( $synonym ); $this -> synonymsNew -> getFormPageActions () -> save (); } }","title":"Define the test() method"},{"location":"magento/test/functional/create_test_practice/#create-the-assertion","text":"By making a simple change, we can create a constraint class that is needed \\Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage <?php /** * Copyright \u00a9 2015 Magento. All rights reserved. * See COPYING.txt for license details. */ namespace Magento\\Customer\\Test\\Constraint ; use Magento\\Customer\\Test\\Page\\Adminhtml\\CustomerIndex ; use Magento\\Mtf\\Constraint\\AbstractConstraint ; /** * Assertion to check Customer success save message. */ class AssertCustomerSuccessSaveMessage extends AbstractConstraint { const SUCCESS_MESSAGE = 'You saved the customer.' ; /** * Assert that success message is displayed after customer save. * * @param CustomerIndex $pageCustomerIndex * @return void */ public function processAssert ( CustomerIndex $pageCustomerIndex ) { $actualMessage = $pageCustomerIndex -> getMessagesBlock () -> getSuccessMessage (); \\PHPUnit_Framework_Assert :: assertEquals ( self :: SUCCESS_MESSAGE , $actualMessage , 'Wrong success message is displayed.' . \" \\n Expected: \" . self :: SUCCESS_MESSAGE . \" \\n Actual: \" . $actualMessage ); } /** * Text success save message is displayed. * * @return string */ public function toString () { return 'Assert that success message is displayed.' ; } } And now we can add to each variation of a data set /dev/tests/functional/tests/app/Magento/Search/Test/TestCase/CreateSynonymEntityTest.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation= \"../../../../../../vendor/magento/mtf/etc/variations.xsd\" > <testCase name= \"Magento\\Search\\Test\\TestCase\\CreateSynonymEntityTest\" summary= \"Create Synonyms\" ticketId= \"MAGETWO-23022016\" > <variation name= \"CreateCategoryEntityTestVariation1_all_websites_all_store_views\" summary= \"Create synonym for all websites and all store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> <constraint name= \"Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage\" /> </variation> <variation name= \"CreateCategoryEntityTestVariation2_main_website_all_store_views\" summary= \"Create synonyms for main website and all store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> <data name= \"synonym/data/scope_id/dataset\" xsi:type= \"string\" > all_store_views </data> <constraint name= \"Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage\" /> </variation> <variation name= \"CreateCategoryEntityTestVariation3_main_website_default_store_view\" summary= \"Create synonyms for main website and default store views\" > <data name= \"synonym/data/synonyms\" xsi:type= \"string\" > shoes %isolation%, foot wear %isolation%, men shoes %isolation%, women shoes %isolation% </data> <data name= \"synonym/data/scope_id/dataset\" xsi:type= \"string\" > default_store_view </data> <constraint name= \"Magento\\Search\\Test\\Constraint\\AssertSynonymSuccessSaveMessage\" /> </variation> </testCase> </config>","title":"Create the assertion"},{"location":"magento/test/functional/create_test_theory/","text":"Create a Test \u00b6 Create a Test in Function Testing Framework. https://devdocs.magento.com/guides/v2.2/mtf/create_test.html Create a functional test \u00b6 Create new module /dev/tests/functional/tests/app/Magento/ . Test object \u00b6 A test object is an object that you are going to test. Most of the test actions are performed under this object. The test object is represented by a fixture . The fixture defines properties of an object. Test data \u00b6 There are two types of test data: - Data for the test, stored in a data set . - Preconditions: - Sample data that is stored in a fixture repository . In a data set, it is stored as a name of the fixture repository. - A sample test entity that can be created by a handler . Test flow \u00b6 A test flow is a set of test steps that you want to perform under the test object to check required functionality. Test steps are defined in a test case . Usually, a test step contains a set of actions. Each action is managed by a method defined in a block . A page is a container for blocks. It stores selectors to identify blocks on an HTML page. Test assertions \u00b6 A test assertion compares the test flow results with the expected ones. Test assertions are represented by constraints .","title":"Create a Test - Theory"},{"location":"magento/test/functional/create_test_theory/#create-a-test","text":"Create a Test in Function Testing Framework. https://devdocs.magento.com/guides/v2.2/mtf/create_test.html","title":"Create a Test"},{"location":"magento/test/functional/create_test_theory/#create-a-functional-test","text":"Create new module /dev/tests/functional/tests/app/Magento/ .","title":"Create a functional test"},{"location":"magento/test/functional/create_test_theory/#test-object","text":"A test object is an object that you are going to test. Most of the test actions are performed under this object. The test object is represented by a fixture . The fixture defines properties of an object.","title":"Test object"},{"location":"magento/test/functional/create_test_theory/#test-data","text":"There are two types of test data: - Data for the test, stored in a data set . - Preconditions: - Sample data that is stored in a fixture repository . In a data set, it is stored as a name of the fixture repository. - A sample test entity that can be created by a handler .","title":"Test data"},{"location":"magento/test/functional/create_test_theory/#test-flow","text":"A test flow is a set of test steps that you want to perform under the test object to check required functionality. Test steps are defined in a test case . Usually, a test step contains a set of actions. Each action is managed by a method defined in a block . A page is a container for blocks. It stores selectors to identify blocks on an HTML page.","title":"Test flow"},{"location":"magento/test/functional/create_test_theory/#test-assertions","text":"A test assertion compares the test flow results with the expected ones. Test assertions are represented by constraints .","title":"Test assertions"},{"location":"magento/test/functional/entities/","text":"Functional Testing Framework Entities \u00b6 Functional Testing Framework Entities. https://devdocs.magento.com/guides/v2.2/mtf/mtf_entities.html Following is a list of all FTF entities. Fixture Fixture overview Create new fixture Read and update new fixture Add repository to the fixture field Add data source to the fixture field Merge fixtures Extend fixture Fixture Repository Handler Block Typified element Page Constraint Data set Test case Scenario test","title":"Functional Testing Framework Entities"},{"location":"magento/test/functional/entities/#functional-testing-framework-entities","text":"Functional Testing Framework Entities. https://devdocs.magento.com/guides/v2.2/mtf/mtf_entities.html Following is a list of all FTF entities. Fixture Fixture overview Create new fixture Read and update new fixture Add repository to the fixture field Add data source to the fixture field Merge fixtures Extend fixture Fixture Repository Handler Block Typified element Page Constraint Data set Test case Scenario test","title":"Functional Testing Framework Entities"},{"location":"magento/test/functional/install/","text":"Installation \u00b6 Prepare install Download Selenium Standalone Server SELENIUM_STANDALONE_VERSION = 3 .4.0 wget -N http://selenium-release.storage.googleapis.com/ $SELENIUM_SUBDIR /selenium-server-standalone- $SELENIUM_STANDALONE_VERSION .jar -P ~/ sudo mv -f ~/selenium-server-standalone- $SELENIUM_STANDALONE_VERSION .jar /usr/local/bin/selenium-server-standalone.jar sudo chmod 777 /usr/local/bin/selenium-server-standalone.jar java -jar /usr/local/bin/selenium-server-standalone.jar & > ~/selenium.log & Download Chrome driver CHROME_DRIVER_VERSION = ` curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE ` wget -N http://chromedriver.storage.googleapis.com/ $CHROME_DRIVER_VERSION /chromedriver_linux64.zip -P ~/ unzip ~/chromedriver_linux64.zip -d ~/ rm ~/chromedriver_linux64.zip sudo mv -f ~/chromedriver /usr/local/bin/chromedriver sudo chmod 777 /usr/local/bin/chromedriver Installation cd <magento2_root_dir>/dev/tests/functional/ composer install Adjust configuration Edit phpunit.xml to configure PHPUnit: /dev/tests/functional/phpunit.xml.dist app_frontend_url app_backend_url Edit config.xml to configure Functional Testing Framework: /dev/tests/functional/etc/config.xml.dist <application> <reopenBrowser> testCase </reopenBrowser> <backendLogin> admin </backendLogin> <backendPassword> admin123 </backendPassword> <appBackendUrl> http://127.0.0.1/ce223/admin/ </appBackendUrl> <backendLoginUrl> admin/auth/login </backendLoginUrl> </application> <isolation> <resetUrlPath> dev/tests/functional/isolation.php </resetUrlPath> <testSuite> none </testSuite> <testCase> none </testCase> <test> none </test> </isolation> <install> <host> 127.0.0.1 </host> <user> root </user> <password> root </password> <dbName> magento_ce223 </dbName> <baseUrl> http://127.0.0.1/ce223/ </baseUrl> <backendName> admin </backendName> </install> <server> <item name= \"selenium\" type= \"default\" browser= \"Google Chrome\" browserName= \"chrome\" host= \"localhost\" port= \"4444\" seleniumServerRequestsTimeout= \"15\" sessionStrategy= \"shared\" > <desiredCapabilities> <platform> ANY </platform> </desiredCapabilities> </item> </server> Prepare Magento application Change WYSIWYG settings Log in to the Magento Admin as an administrator. Follow Stores > Configuration > General > Content Management > WYSIWYG Options. Set Enable WYSIWYG Editor to Disabled Completely. Click Save Config. Change security settings Follow Stores > Configuration > Advanced > Admin > Security. Set Admin Account Sharing to Yes. Set Add Secret Key to URLs to No. Refresh page cache Apache: Copy /dev/tests/functional/.htaccess.sample to /dev/tests/functional/.htaccess. Run generator cd <magento2_root_dir>/dev/tests/functional/utils php generate.php","title":"Installation"},{"location":"magento/test/functional/install/#installation","text":"Prepare install Download Selenium Standalone Server SELENIUM_STANDALONE_VERSION = 3 .4.0 wget -N http://selenium-release.storage.googleapis.com/ $SELENIUM_SUBDIR /selenium-server-standalone- $SELENIUM_STANDALONE_VERSION .jar -P ~/ sudo mv -f ~/selenium-server-standalone- $SELENIUM_STANDALONE_VERSION .jar /usr/local/bin/selenium-server-standalone.jar sudo chmod 777 /usr/local/bin/selenium-server-standalone.jar java -jar /usr/local/bin/selenium-server-standalone.jar & > ~/selenium.log & Download Chrome driver CHROME_DRIVER_VERSION = ` curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE ` wget -N http://chromedriver.storage.googleapis.com/ $CHROME_DRIVER_VERSION /chromedriver_linux64.zip -P ~/ unzip ~/chromedriver_linux64.zip -d ~/ rm ~/chromedriver_linux64.zip sudo mv -f ~/chromedriver /usr/local/bin/chromedriver sudo chmod 777 /usr/local/bin/chromedriver Installation cd <magento2_root_dir>/dev/tests/functional/ composer install Adjust configuration Edit phpunit.xml to configure PHPUnit: /dev/tests/functional/phpunit.xml.dist app_frontend_url app_backend_url Edit config.xml to configure Functional Testing Framework: /dev/tests/functional/etc/config.xml.dist <application> <reopenBrowser> testCase </reopenBrowser> <backendLogin> admin </backendLogin> <backendPassword> admin123 </backendPassword> <appBackendUrl> http://127.0.0.1/ce223/admin/ </appBackendUrl> <backendLoginUrl> admin/auth/login </backendLoginUrl> </application> <isolation> <resetUrlPath> dev/tests/functional/isolation.php </resetUrlPath> <testSuite> none </testSuite> <testCase> none </testCase> <test> none </test> </isolation> <install> <host> 127.0.0.1 </host> <user> root </user> <password> root </password> <dbName> magento_ce223 </dbName> <baseUrl> http://127.0.0.1/ce223/ </baseUrl> <backendName> admin </backendName> </install> <server> <item name= \"selenium\" type= \"default\" browser= \"Google Chrome\" browserName= \"chrome\" host= \"localhost\" port= \"4444\" seleniumServerRequestsTimeout= \"15\" sessionStrategy= \"shared\" > <desiredCapabilities> <platform> ANY </platform> </desiredCapabilities> </item> </server> Prepare Magento application Change WYSIWYG settings Log in to the Magento Admin as an administrator. Follow Stores > Configuration > General > Content Management > WYSIWYG Options. Set Enable WYSIWYG Editor to Disabled Completely. Click Save Config. Change security settings Follow Stores > Configuration > Advanced > Admin > Security. Set Admin Account Sharing to Yes. Set Add Secret Key to URLs to No. Refresh page cache Apache: Copy /dev/tests/functional/.htaccess.sample to /dev/tests/functional/.htaccess. Run generator cd <magento2_root_dir>/dev/tests/functional/utils php generate.php","title":"Installation"},{"location":"magento/test/functional/run/","text":"Test run \u00b6 Run all tests cd <magento2_root_dir>/dev/tests/functional vendor/bin/phpunit Run particular test cd <magento2_root_dir>/dev/tests/functional vendor/bin/phpunit --filter <name of test>","title":"Test Run"},{"location":"magento/test/functional/run/#test-run","text":"Run all tests cd <magento2_root_dir>/dev/tests/functional vendor/bin/phpunit Run particular test cd <magento2_root_dir>/dev/tests/functional vendor/bin/phpunit --filter <name of test>","title":"Test run"},{"location":"microservices/documents/","text":"Overview \u00b6 This is our developer docs about Documents about Microservices Microservice Docs: Microservices_Project_List Microservice Dependency Graph Dataset","title":"Documents"},{"location":"microservices/documents/#overview","text":"This is our developer docs about Documents about Microservices Microservice Docs: Microservices_Project_List Microservice Dependency Graph Dataset","title":"Overview"},{"location":"microservices/note/","text":"Note about Microservices \u00b6 Reference code \u00b6 https://github.com/eventuate-foundation","title":"Note"},{"location":"microservices/note/#note-about-microservices","text":"","title":"Note about Microservices"},{"location":"microservices/note/#reference-code","text":"https://github.com/eventuate-foundation","title":"Reference code"},{"location":"microservices/sample/","text":"Overview \u00b6 This is our developer docs about Sample use Microservices https://github.com/FinbertMDS/event-sourcing-examples https://github.com/FinbertMDS/microservices-demo https://github.com/FinbertMDS/cqrs-microservice-sampler","title":"Sample"},{"location":"microservices/sample/#overview","text":"This is our developer docs about Sample use Microservices https://github.com/FinbertMDS/event-sourcing-examples https://github.com/FinbertMDS/microservices-demo https://github.com/FinbertMDS/cqrs-microservice-sampler","title":"Overview"},{"location":"nginx/reverse_proxy/","text":"Overview \u00b6 This is our developer docs about Use Nginx as Reverse Proxy. Simple reverse proxy \u00b6 upstream jenkins { server 172.17.0.1:8080 weight=1 ; } server { listen 80 ; server_name jenkins.example.com ; location / { proxy_pass http : // jenkins ; } } Reverse proxy redirect HTTP to HTTPS for site Magento on Docker \u00b6 Add SSL to folder /etc/nginx/ssl/ \u00b6 Magento 1 \u00b6 upstream magento1_ssl { server 172.17.0.1:9096 weight=1 ; } server { listen 80 ; server_name magento1.com ; return 301 https : // $ host $ request_uri ; } server { listen 443 ; server_name magento1.com ; ssl_certificate /etc/nginx/ssl/magento1_ssl.crt ; ssl_certificate_key /etc/nginx/ssl/magento1_ssl.key ; ssl on ; ssl_session_cache builtin : 1000 shared : SSL : 10 m ; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 ; ssl_ciphers HIGH : ! aNULL :! eNULL :! EXPORT :! CAMELLIA :! DES :! MD5 :! PSK :! RC4 ; ssl_prefer_server_ciphers on ; location / { proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_pass https : // magento1_ssl ; } location / admin { return 301 /index.php/admin ; } } Magento 2 \u00b6 upstream magento2_ssl { server 172.17.0.1:9092 weight=1 ; } server { listen 80 ; server_name magento2.com ; return 301 https : // $ host $ request_uri ; } server { listen 443 ; server_name magento2.com ; ssl_certificate /etc/nginx/ssl/magento2_ssl.crt ; ssl_certificate_key /etc/nginx/ssl/magento2_ssl.key ; ssl on ; ssl_session_cache builtin : 1000 shared : SSL : 10 m ; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 ; ssl_ciphers HIGH : ! aNULL :! eNULL :! EXPORT :! CAMELLIA :! DES :! MD5 :! PSK :! RC4 ; ssl_prefer_server_ciphers on ; location / { proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_pass https : // magento2_ssl ; } }","title":"Reverse Proxy"},{"location":"nginx/reverse_proxy/#overview","text":"This is our developer docs about Use Nginx as Reverse Proxy.","title":"Overview"},{"location":"nginx/reverse_proxy/#simple-reverse-proxy","text":"upstream jenkins { server 172.17.0.1:8080 weight=1 ; } server { listen 80 ; server_name jenkins.example.com ; location / { proxy_pass http : // jenkins ; } }","title":"Simple reverse proxy"},{"location":"nginx/reverse_proxy/#reverse-proxy-redirect-http-to-https-for-site-magento-on-docker","text":"","title":"Reverse proxy redirect HTTP to HTTPS for site Magento on Docker"},{"location":"nginx/reverse_proxy/#add-ssl-to-folder-etcnginxssl","text":"","title":"Add SSL to folder /etc/nginx/ssl/"},{"location":"nginx/reverse_proxy/#magento-1","text":"upstream magento1_ssl { server 172.17.0.1:9096 weight=1 ; } server { listen 80 ; server_name magento1.com ; return 301 https : // $ host $ request_uri ; } server { listen 443 ; server_name magento1.com ; ssl_certificate /etc/nginx/ssl/magento1_ssl.crt ; ssl_certificate_key /etc/nginx/ssl/magento1_ssl.key ; ssl on ; ssl_session_cache builtin : 1000 shared : SSL : 10 m ; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 ; ssl_ciphers HIGH : ! aNULL :! eNULL :! EXPORT :! CAMELLIA :! DES :! MD5 :! PSK :! RC4 ; ssl_prefer_server_ciphers on ; location / { proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_pass https : // magento1_ssl ; } location / admin { return 301 /index.php/admin ; } }","title":"Magento 1"},{"location":"nginx/reverse_proxy/#magento-2","text":"upstream magento2_ssl { server 172.17.0.1:9092 weight=1 ; } server { listen 80 ; server_name magento2.com ; return 301 https : // $ host $ request_uri ; } server { listen 443 ; server_name magento2.com ; ssl_certificate /etc/nginx/ssl/magento2_ssl.crt ; ssl_certificate_key /etc/nginx/ssl/magento2_ssl.key ; ssl on ; ssl_session_cache builtin : 1000 shared : SSL : 10 m ; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 ; ssl_ciphers HIGH : ! aNULL :! eNULL :! EXPORT :! CAMELLIA :! DES :! MD5 :! PSK :! RC4 ; ssl_prefer_server_ciphers on ; location / { proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_pass https : // magento2_ssl ; } }","title":"Magento 2"},{"location":"nginx/web_server/","text":"Overview \u00b6 This is our developer docs about Use Nginx to Web server Install Nginx \u00b6 Install Nginx sudo apt update sudo apt install nginx -y Adjusting the Firewall sudo ufw enable sudo ufw allow ssh sudo ufw allow 22 sudo ufw allow 'Nginx Full' Setting Up Server Blocks \u00b6 Installing PHP and Configuring Nginx to Use the PHP Processor sudo apt install php-fpm php-mysql -y Config Site available nginx: /etc/nginx/sites-available/nginx-server server { listen 80 ; listen [ :: ] : 80 ; server_name nginx.example.com ; root /var/www/html ; index index.php index.html index.htm index.nginx-debian.html ; location / { try_files $uri $uri/ =404 ; } location ~ \\ . php $ { include snippets/fastcgi-php.conf ; fastcgi_pass unix : / run / php / php7 .2 - fpm . sock ; } location ~ / \\ . ht { deny all ; } } Enable new server block sudo ln -s /etc/nginx/sites-available/nginx-server /etc/nginx/sites-enabled/ Test new config file and reload nginx sudo nginx -t sudo systemctl reload nginx","title":"Web Server"},{"location":"nginx/web_server/#overview","text":"This is our developer docs about Use Nginx to Web server","title":"Overview"},{"location":"nginx/web_server/#install-nginx","text":"Install Nginx sudo apt update sudo apt install nginx -y Adjusting the Firewall sudo ufw enable sudo ufw allow ssh sudo ufw allow 22 sudo ufw allow 'Nginx Full'","title":"Install Nginx"},{"location":"nginx/web_server/#setting-up-server-blocks","text":"Installing PHP and Configuring Nginx to Use the PHP Processor sudo apt install php-fpm php-mysql -y Config Site available nginx: /etc/nginx/sites-available/nginx-server server { listen 80 ; listen [ :: ] : 80 ; server_name nginx.example.com ; root /var/www/html ; index index.php index.html index.htm index.nginx-debian.html ; location / { try_files $uri $uri/ =404 ; } location ~ \\ . php $ { include snippets/fastcgi-php.conf ; fastcgi_pass unix : / run / php / php7 .2 - fpm . sock ; } location ~ / \\ . ht { deny all ; } } Enable new server block sudo ln -s /etc/nginx/sites-available/nginx-server /etc/nginx/sites-enabled/ Test new config file and reload nginx sudo nginx -t sudo systemctl reload nginx","title":"Setting Up Server Blocks"},{"location":"react_native/note/","text":"Overview \u00b6 This is our developer docs about Some note about React native Jest When install Jest for React native can has some error, follow links to fix: https://github.com/facebook/jest/issues/2663#issuecomment-317109798 https://jestjs.io/docs/en/webpack#handling-static-assets https://github.com/itinance/react-native-fs/issues/404#issuecomment-411254352 All source, you can find at here Putting native in React Native on Android","title":"Note"},{"location":"react_native/note/#overview","text":"This is our developer docs about Some note about React native Jest When install Jest for React native can has some error, follow links to fix: https://github.com/facebook/jest/issues/2663#issuecomment-317109798 https://jestjs.io/docs/en/webpack#handling-static-assets https://github.com/itinance/react-native-fs/issues/404#issuecomment-411254352 All source, you can find at here Putting native in React Native on Android","title":"Overview"},{"location":"server/domain/","text":"Overview \u00b6 This is our developer docs about Config domain for server. Buy domain \u00b6 Register domain free: https://www.freenom.com Config domain \u00b6 Add 2 record in DNS Management Name Type TTL Target A 300 45.77.42.74 www A 300 45.77.42.74 Create server \u00b6 Create droplet at Digital Ocean Config server \u00b6 Add domain Config domain, add record in DNS Management Type Hostname IS AN ALIAS OF TTL (seconds) CNAME www.developer-test.ml developer-test.ml. 43200","title":"Domain"},{"location":"server/domain/#overview","text":"This is our developer docs about Config domain for server.","title":"Overview"},{"location":"server/domain/#buy-domain","text":"Register domain free: https://www.freenom.com","title":"Buy domain"},{"location":"server/domain/#config-domain","text":"Add 2 record in DNS Management Name Type TTL Target A 300 45.77.42.74 www A 300 45.77.42.74","title":"Config domain"},{"location":"server/domain/#create-server","text":"Create droplet at Digital Ocean","title":"Create server"},{"location":"server/domain/#config-server","text":"Add domain Config domain, add record in DNS Management Type Hostname IS AN ALIAS OF TTL (seconds) CNAME www.developer-test.ml developer-test.ml. 43200","title":"Config server"},{"location":"server/note/","text":"Overview \u00b6 This is our developer docs about Some note about Server","title":"Note"},{"location":"server/note/#overview","text":"This is our developer docs about Some note about Server","title":"Overview"},{"location":"server/ssh/","text":"Overview \u00b6 This is our developer docs about How to Set up SSH keys Setup \u00b6 Create the RSA Key Pair ssh-keygen -t rsa Copy the Public key ssh-copy-id demo@198.51.100.0 Note \u00b6 After enalbe Ufw then default SSH Connection is disabled. If you want continue using SSH connect to server, you must enable SSH connection. https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-16-04 sudo ufw allow ssh sudo ufw allow 22 With Digital Ocean, copy the Public key default is cannot. If you want copy the public key to server, you must do it Log in as root Edit ssh config: sudo nano /etc/ssh/sshd_config Change this line: PasswordAuthentication no to PasswordAuthentication yes Restart daemon: sudo systemctl restart sshd","title":"SSH"},{"location":"server/ssh/#overview","text":"This is our developer docs about How to Set up SSH keys","title":"Overview"},{"location":"server/ssh/#setup","text":"Create the RSA Key Pair ssh-keygen -t rsa Copy the Public key ssh-copy-id demo@198.51.100.0","title":"Setup"},{"location":"server/ssh/#note","text":"After enalbe Ufw then default SSH Connection is disabled. If you want continue using SSH connect to server, you must enable SSH connection. https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-16-04 sudo ufw allow ssh sudo ufw allow 22 With Digital Ocean, copy the Public key default is cannot. If you want copy the public key to server, you must do it Log in as root Edit ssh config: sudo nano /etc/ssh/sshd_config Change this line: PasswordAuthentication no to PasswordAuthentication yes Restart daemon: sudo systemctl restart sshd","title":"Note"},{"location":"server/ssl/","text":"Overview \u00b6 This is our developer docs about Config SSL for Server Tools \u00b6 https://letsencrypt.org/ Setup \u00b6 Ubuntu 16.04, Nginx \u00b6 sudo apt-get update sudo apt-get install software-properties-common sudo add-apt-repository ppa:certbot/certbot sudo apt-get update sudo apt-get install python-certbot-nginx -y sudo certbot certonly --server https://acme-v02.api.letsencrypt.org/directory --agree-tos --manual --preferred-challenges dns -d 'finbert-test.ml,*.finbert-test.ml' sudo certbot renew --dry-run Note \u00b6 If after install, you still not access SSL, can you disable SSL on server. You can enable SSL server with command sudo ufw allow 'Nginx Full' sudo ufw delete allow 'Nginx HTTP'","title":"SSL"},{"location":"server/ssl/#overview","text":"This is our developer docs about Config SSL for Server","title":"Overview"},{"location":"server/ssl/#tools","text":"https://letsencrypt.org/","title":"Tools"},{"location":"server/ssl/#setup","text":"","title":"Setup"},{"location":"server/ssl/#ubuntu-1604-nginx","text":"sudo apt-get update sudo apt-get install software-properties-common sudo add-apt-repository ppa:certbot/certbot sudo apt-get update sudo apt-get install python-certbot-nginx -y sudo certbot certonly --server https://acme-v02.api.letsencrypt.org/directory --agree-tos --manual --preferred-challenges dns -d 'finbert-test.ml,*.finbert-test.ml' sudo certbot renew --dry-run","title":"Ubuntu 16.04, Nginx"},{"location":"server/ssl/#note","text":"If after install, you still not access SSL, can you disable SSL on server. You can enable SSL server with command sudo ufw allow 'Nginx Full' sudo ufw delete allow 'Nginx HTTP'","title":"Note"},{"location":"ubuntu/bash/","text":"Overview \u00b6 This is our developer docs about Bash file and command in bash file Array \u00b6 Declare array array =( word \"two words\" words ) Check array contain element if [[ \" ${ array [@] } \" = ~ \" ${ value } \" ]] ; then # whatever you want to do when arr contains value fi if [[ ! \" ${ array [@] } \" = ~ \" ${ value } \" ]] ; then # whatever you want to do when arr doesn't contain value fi array =( word \"two words\" words ) search_string = \"one\" match = $( echo \" ${ array [@]: 0 } \" | grep -o $search_string ) [[ ! -z $match ]] && echo \"found !\"","title":"Bash scripts"},{"location":"ubuntu/bash/#overview","text":"This is our developer docs about Bash file and command in bash file","title":"Overview"},{"location":"ubuntu/bash/#array","text":"Declare array array =( word \"two words\" words ) Check array contain element if [[ \" ${ array [@] } \" = ~ \" ${ value } \" ]] ; then # whatever you want to do when arr contains value fi if [[ ! \" ${ array [@] } \" = ~ \" ${ value } \" ]] ; then # whatever you want to do when arr doesn't contain value fi array =( word \"two words\" words ) search_string = \"one\" match = $( echo \" ${ array [@]: 0 } \" | grep -o $search_string ) [[ ! -z $match ]] && echo \"found !\"","title":"Array"},{"location":"ubuntu/command/","text":"Overview \u00b6 This is our developer docs about Command useful in Ubuntu Network \u00b6 What ports are opened sudo netstat -ntlp | grep LISTEN Download file from link wget url wget -P directory url wget -O directory/fileName url User - Group \u00b6 Add user sudo adduser username sudo usermod -aG group username Add user to group and not need input password when use command with group sudo gpasswd -a $USER group Remove user out of group gpasswd -d user group Note: User need logout, login again then config password will active","title":"Command line"},{"location":"ubuntu/command/#overview","text":"This is our developer docs about Command useful in Ubuntu","title":"Overview"},{"location":"ubuntu/command/#network","text":"What ports are opened sudo netstat -ntlp | grep LISTEN Download file from link wget url wget -P directory url wget -O directory/fileName url","title":"Network"},{"location":"ubuntu/command/#user-group","text":"Add user sudo adduser username sudo usermod -aG group username Add user to group and not need input password when use command with group sudo gpasswd -a $USER group Remove user out of group gpasswd -d user group Note: User need logout, login again then config password will active","title":"User - Group"},{"location":"ubuntu/note/","text":"Note about Ubuntu \u00b6 Libs for Ubuntu Example: Script create certificate SSL for site","title":"Note"},{"location":"ubuntu/note/#note-about-ubuntu","text":"Libs for Ubuntu Example: Script create certificate SSL for site","title":"Note about Ubuntu"},{"location":"ubuntu/ssh/","text":"Overview \u00b6 This is our developer docs about How to remote to server Ubuntu SSH to server \u00b6 Use Putty \u00b6 Install Putty On Windows: https://www.sitecuatui.com/tao-ssh-key-bang-puttygen/ On Ubuntu: https://websiteforstudents.com/installing-putty-on-ubuntu-16-04-17-10-18-04/ Create file server.ppk with info about Putty Key Fill info about server Host name or Ip Port Connection > SSH > Auth then press Browse\u2026 to file server.ppk Use command line \u00b6 Install SSH https://help.ubuntu.com/lts/serverguide/openssh-server.html.en Create file server.pem with info about Private key Provide permission 400 for file server.pem to to make sure that your private key file isn't publicly viewable. chmod 400 server.pem Connect to server by command ssh -i server.pem ubuntu@demo-omc1.magestore.com -p 2213 https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html Command line with ssh \u00b6 Connect to server \u00b6 Connect to server ssh <user>@<remote_host> -p <port> Copy files \u00b6 Copy file from local host to to remote host scp <file_path> <user>@<remote_host>:<remote_dir> Copy file from remote host to local host scp <user>@<remote_host>:<remote_file_path> <local_dir> Multiple files from Local host to the Remote host scp <file_path> <file_path> <user>@<remote_host>:<remote_dir> Directory from Local host to the Remote host scp -r <local_dir> <user>@<remote_host>:<remote_dir> Directory from Remote host to the Local host scp -r <user>@<remote_host>:<remote_dir> <local_dir> Info server \u00b6 Server: IP: 45.77.42.74 Username: root Pass: 1u,Z#+3d#?@b{.sx ssh root@45.77.42.74 1u,Z#+3d#?@b{.sx Server Info SSH IP: 54.83.169.163 Port: 2213 Username: ubuntu Example file SSH Pem and SSH Putty \u00b6 Private key: Create file server.pem with info about private key -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA0GTRLEQ25wcudoa+NKaOG3dKV955ZhjeI/YhU1IFKc7fOM16 koXTWPtVE8D09VVkjfWxgQavP8eqcocIEWxNt3uSeFzn0zvUfTL1PeXlx9I3qwOB m/NqdGdhL/8NQ4L1LPQ5NYxnwlIMz0S76IMDwSBl9NeVv+swPEejEhbMI5/9yEaO MrtwnADBO73NvxHa8/vh9F54YwNE1rV1yksmrzLygBS0+6z2Jefqom6zSgdUONlN 77JdPPzLZXzWt7nlNAcNHlymiXWWDY2sQl/mU7P6r7FQgjv9SiFca8zrMlT/rmur ZAQPmkiEZeXfHZg5qoML/CLr/wLBNyJ4pOROkwIDAQABAoIBACSLmZceu1YWj1Jf 3NlU4BT2/YWdUULTV5mM31lCR/+F9OV8O2OYrnCrWsclDpA7km/Gx4MuDeusczq0 bXjIunRT6mLLQChuFJyEJDffqkU5m2OVMNSNgny5aHTHUKcnPyHMDoBSiBuu0epD ToS+/RiQOvEOIYfPkdzwXyub7d7NLbEWKOThpLecn6EubH8FhJihUTgzy0Xb3kHQ /sIIZToaqVI6iAuIBL1t+UNuwBTQsItUsxjFQZMeqCjmgLmZy95ggLlbpQhZJJmx Fk4bQcMKGfkhJUy3iwZ4ZGxLbpSPjiS5IGs1QyzuII6/93UKSgYQUkUHtAdog4Qu /x7Nv4ECgYEA+RuzIrM2aFsBXBJ2mLATib1ylTFMstGM6HEf4UjCKIW5BijSFL4j M90hC0+CUfhWVviTdvwLbGry8pfsFviGZQuNHTFlCe8dGUybrqw/kQe5P7ICg7zK M/zE/lCCjUvu6J1fOK9rMgw0iTFEiS4iQnmJxqK5FuTLsr2mVyuKLlMCgYEA1ijC VI32utg2DR1h5jJ57TKSysd1Cc1xuaq3787pv0UqdfocpFZlHIfAxqg2Ow+yhKgn wniZrgLWKfsaFEapojvvlqcg8cIaAjnKf4JEa7LBtSZgI6q3+pKrZk+BRqr9aCld xNLlv4wLWabi6DBrLu+zs09vYKB+2USG8wlK1sECgYEA8sG1rmkq6kNVbd5oSJ++ SoqeMRnb/p8LTDGBuc9ntomqJ4B8Sc6JC6/A1f7jpvH1YcfYHSm+ECehHhxC7JfA kJPTLtHF/wpQNylaxbwCLllyg8n7fVnrSwJXDuZyczO+XF2QP/Ni6WDPiarDeVPF +zXpt/M3oEHS6Bq9EVHS1RUCgYAjAsLSQ+skHJipiDYrBfF835mz4Ou3UIjZC5nK cI8yH8KTSvJHw4AALAlN8M381dIfccYeOs0U743Hiy92RR8SUK4YePYfz9Wkq4H5 WniJCs40KTPqYMx3AGdY8IJ35RhMYQbdWIUKzYBFhczunIvJPpKoK8JPj61tI5DU Rp6fgQKBgQClAX0rMilvfb7Zi9nrHPc862VndUrepClRw/x/BewqppshWII8qyfv nc4tbbeURr/W88zUWZ5fTGYf972UJqOQ5CI0XJFIYr8V7NnNmz9UdCixLgPQQidC 7JJY4Y72PjbCwA9DJUNwhyxX2pdFjjJqvGrSukP12cTx0WLiIpDFXw== -----END RSA PRIVATE KEY----- Putty key Create file server.ppk with info about Putty Key: PuTTY-User-Key-File-2: ssh-rsa Encryption: none Comment: imported-openssh-key Public-Lines: 6 AAAAB3NzaC1yc2EAAAADAQABAAABAQDQZNEsRDbnBy52hr40po4bd0pX3nlmGN4j 9iFTUgUpzt84zXqShdNY+1UTwPT1VWSN9bGBBq8/x6pyhwgRbE23e5J4XOfTO9R9 MvU95eXH0jerA4Gb82p0Z2Ev/w1DgvUs9Dk1jGfCUgzPRLvogwPBIGX015W/6zA8 R6MSFswjn/3IRo4yu3CcAME7vc2/Edrz++H0XnhjA0TWtXXKSyavMvKAFLT7rPYl 5+qibrNKB1Q42U3vsl08/MtlfNa3ueU0Bw0eXKaJdZYNjaxCX+ZTs/qvsVCCO/1K IVxrzOsyVP+ua6tkBA+aSIRl5d8dmDmqgwv8Iuv/AsE3Inik5E6T Private-Lines: 14 AAABACSLmZceu1YWj1Jf3NlU4BT2/YWdUULTV5mM31lCR/+F9OV8O2OYrnCrWscl DpA7km/Gx4MuDeusczq0bXjIunRT6mLLQChuFJyEJDffqkU5m2OVMNSNgny5aHTH UKcnPyHMDoBSiBuu0epDToS+/RiQOvEOIYfPkdzwXyub7d7NLbEWKOThpLecn6Eu bH8FhJihUTgzy0Xb3kHQ/sIIZToaqVI6iAuIBL1t+UNuwBTQsItUsxjFQZMeqCjm gLmZy95ggLlbpQhZJJmxFk4bQcMKGfkhJUy3iwZ4ZGxLbpSPjiS5IGs1QyzuII6/ 93UKSgYQUkUHtAdog4Qu/x7Nv4EAAACBAPkbsyKzNmhbAVwSdpiwE4m9cpUxTLLR jOhxH+FIwiiFuQYo0hS+IzPdIQtPglH4Vlb4k3b8C2xq8vKX7Bb4hmULjR0xZQnv HRlMm66sP5EHuT+yAoO8yjP8xP5Qgo1L7uidXzivazIMNIkxRIkuIkJ5icaiuRbk y7K9plcrii5TAAAAgQDWKMJUjfa62DYNHWHmMnntMpLKx3UJzXG5qrfvzum/RSp1 +hykVmUch8DGqDY7D7KEqCfCeJmuAtYp+xoURqmiO++WpyDxwhoCOcp/gkRrssG1 JmAjqrf6kqtmT4FGqv1oKV3E0uW/jAtZpuLoMGsu77OzT29goH7ZRIbzCUrWwQAA AIEApQF9KzIpb32+2YvZ6xz3POtlZ3VK3qQpUcP8fwXsKqabIViCPKsn753OLW23 lEa/1vPM1FmeX0xmH/e9lCajkOQiNFyRSGK/FezZzZs/VHQosS4D0EInQuySWOGO 9j42wsAPQyVDcIcsV9qXRY4yarxq0rpD9dnE8dFi4iKQxV8= Private-MAC: d619c293fe0ac660bff38d6c8db7d73736a51826","title":"SSH"},{"location":"ubuntu/ssh/#overview","text":"This is our developer docs about How to remote to server Ubuntu","title":"Overview"},{"location":"ubuntu/ssh/#ssh-to-server","text":"","title":"SSH to server"},{"location":"ubuntu/ssh/#use-putty","text":"Install Putty On Windows: https://www.sitecuatui.com/tao-ssh-key-bang-puttygen/ On Ubuntu: https://websiteforstudents.com/installing-putty-on-ubuntu-16-04-17-10-18-04/ Create file server.ppk with info about Putty Key Fill info about server Host name or Ip Port Connection > SSH > Auth then press Browse\u2026 to file server.ppk","title":"Use Putty"},{"location":"ubuntu/ssh/#use-command-line","text":"Install SSH https://help.ubuntu.com/lts/serverguide/openssh-server.html.en Create file server.pem with info about Private key Provide permission 400 for file server.pem to to make sure that your private key file isn't publicly viewable. chmod 400 server.pem Connect to server by command ssh -i server.pem ubuntu@demo-omc1.magestore.com -p 2213 https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html","title":"Use command line"},{"location":"ubuntu/ssh/#command-line-with-ssh","text":"","title":"Command line with ssh"},{"location":"ubuntu/ssh/#connect-to-server","text":"Connect to server ssh <user>@<remote_host> -p <port>","title":"Connect to server"},{"location":"ubuntu/ssh/#copy-files","text":"Copy file from local host to to remote host scp <file_path> <user>@<remote_host>:<remote_dir> Copy file from remote host to local host scp <user>@<remote_host>:<remote_file_path> <local_dir> Multiple files from Local host to the Remote host scp <file_path> <file_path> <user>@<remote_host>:<remote_dir> Directory from Local host to the Remote host scp -r <local_dir> <user>@<remote_host>:<remote_dir> Directory from Remote host to the Local host scp -r <user>@<remote_host>:<remote_dir> <local_dir>","title":"Copy files"},{"location":"ubuntu/ssh/#info-server","text":"Server: IP: 45.77.42.74 Username: root Pass: 1u,Z#+3d#?@b{.sx ssh root@45.77.42.74 1u,Z#+3d#?@b{.sx Server Info SSH IP: 54.83.169.163 Port: 2213 Username: ubuntu","title":"Info server"},{"location":"ubuntu/ssh/#example-file-ssh-pem-and-ssh-putty","text":"Private key: Create file server.pem with info about private key -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA0GTRLEQ25wcudoa+NKaOG3dKV955ZhjeI/YhU1IFKc7fOM16 koXTWPtVE8D09VVkjfWxgQavP8eqcocIEWxNt3uSeFzn0zvUfTL1PeXlx9I3qwOB m/NqdGdhL/8NQ4L1LPQ5NYxnwlIMz0S76IMDwSBl9NeVv+swPEejEhbMI5/9yEaO MrtwnADBO73NvxHa8/vh9F54YwNE1rV1yksmrzLygBS0+6z2Jefqom6zSgdUONlN 77JdPPzLZXzWt7nlNAcNHlymiXWWDY2sQl/mU7P6r7FQgjv9SiFca8zrMlT/rmur ZAQPmkiEZeXfHZg5qoML/CLr/wLBNyJ4pOROkwIDAQABAoIBACSLmZceu1YWj1Jf 3NlU4BT2/YWdUULTV5mM31lCR/+F9OV8O2OYrnCrWsclDpA7km/Gx4MuDeusczq0 bXjIunRT6mLLQChuFJyEJDffqkU5m2OVMNSNgny5aHTHUKcnPyHMDoBSiBuu0epD ToS+/RiQOvEOIYfPkdzwXyub7d7NLbEWKOThpLecn6EubH8FhJihUTgzy0Xb3kHQ /sIIZToaqVI6iAuIBL1t+UNuwBTQsItUsxjFQZMeqCjmgLmZy95ggLlbpQhZJJmx Fk4bQcMKGfkhJUy3iwZ4ZGxLbpSPjiS5IGs1QyzuII6/93UKSgYQUkUHtAdog4Qu /x7Nv4ECgYEA+RuzIrM2aFsBXBJ2mLATib1ylTFMstGM6HEf4UjCKIW5BijSFL4j M90hC0+CUfhWVviTdvwLbGry8pfsFviGZQuNHTFlCe8dGUybrqw/kQe5P7ICg7zK M/zE/lCCjUvu6J1fOK9rMgw0iTFEiS4iQnmJxqK5FuTLsr2mVyuKLlMCgYEA1ijC VI32utg2DR1h5jJ57TKSysd1Cc1xuaq3787pv0UqdfocpFZlHIfAxqg2Ow+yhKgn wniZrgLWKfsaFEapojvvlqcg8cIaAjnKf4JEa7LBtSZgI6q3+pKrZk+BRqr9aCld xNLlv4wLWabi6DBrLu+zs09vYKB+2USG8wlK1sECgYEA8sG1rmkq6kNVbd5oSJ++ SoqeMRnb/p8LTDGBuc9ntomqJ4B8Sc6JC6/A1f7jpvH1YcfYHSm+ECehHhxC7JfA kJPTLtHF/wpQNylaxbwCLllyg8n7fVnrSwJXDuZyczO+XF2QP/Ni6WDPiarDeVPF +zXpt/M3oEHS6Bq9EVHS1RUCgYAjAsLSQ+skHJipiDYrBfF835mz4Ou3UIjZC5nK cI8yH8KTSvJHw4AALAlN8M381dIfccYeOs0U743Hiy92RR8SUK4YePYfz9Wkq4H5 WniJCs40KTPqYMx3AGdY8IJ35RhMYQbdWIUKzYBFhczunIvJPpKoK8JPj61tI5DU Rp6fgQKBgQClAX0rMilvfb7Zi9nrHPc862VndUrepClRw/x/BewqppshWII8qyfv nc4tbbeURr/W88zUWZ5fTGYf972UJqOQ5CI0XJFIYr8V7NnNmz9UdCixLgPQQidC 7JJY4Y72PjbCwA9DJUNwhyxX2pdFjjJqvGrSukP12cTx0WLiIpDFXw== -----END RSA PRIVATE KEY----- Putty key Create file server.ppk with info about Putty Key: PuTTY-User-Key-File-2: ssh-rsa Encryption: none Comment: imported-openssh-key Public-Lines: 6 AAAAB3NzaC1yc2EAAAADAQABAAABAQDQZNEsRDbnBy52hr40po4bd0pX3nlmGN4j 9iFTUgUpzt84zXqShdNY+1UTwPT1VWSN9bGBBq8/x6pyhwgRbE23e5J4XOfTO9R9 MvU95eXH0jerA4Gb82p0Z2Ev/w1DgvUs9Dk1jGfCUgzPRLvogwPBIGX015W/6zA8 R6MSFswjn/3IRo4yu3CcAME7vc2/Edrz++H0XnhjA0TWtXXKSyavMvKAFLT7rPYl 5+qibrNKB1Q42U3vsl08/MtlfNa3ueU0Bw0eXKaJdZYNjaxCX+ZTs/qvsVCCO/1K IVxrzOsyVP+ua6tkBA+aSIRl5d8dmDmqgwv8Iuv/AsE3Inik5E6T Private-Lines: 14 AAABACSLmZceu1YWj1Jf3NlU4BT2/YWdUULTV5mM31lCR/+F9OV8O2OYrnCrWscl DpA7km/Gx4MuDeusczq0bXjIunRT6mLLQChuFJyEJDffqkU5m2OVMNSNgny5aHTH UKcnPyHMDoBSiBuu0epDToS+/RiQOvEOIYfPkdzwXyub7d7NLbEWKOThpLecn6Eu bH8FhJihUTgzy0Xb3kHQ/sIIZToaqVI6iAuIBL1t+UNuwBTQsItUsxjFQZMeqCjm gLmZy95ggLlbpQhZJJmxFk4bQcMKGfkhJUy3iwZ4ZGxLbpSPjiS5IGs1QyzuII6/ 93UKSgYQUkUHtAdog4Qu/x7Nv4EAAACBAPkbsyKzNmhbAVwSdpiwE4m9cpUxTLLR jOhxH+FIwiiFuQYo0hS+IzPdIQtPglH4Vlb4k3b8C2xq8vKX7Bb4hmULjR0xZQnv HRlMm66sP5EHuT+yAoO8yjP8xP5Qgo1L7uidXzivazIMNIkxRIkuIkJ5icaiuRbk y7K9plcrii5TAAAAgQDWKMJUjfa62DYNHWHmMnntMpLKx3UJzXG5qrfvzum/RSp1 +hykVmUch8DGqDY7D7KEqCfCeJmuAtYp+xoURqmiO++WpyDxwhoCOcp/gkRrssG1 JmAjqrf6kqtmT4FGqv1oKV3E0uW/jAtZpuLoMGsu77OzT29goH7ZRIbzCUrWwQAA AIEApQF9KzIpb32+2YvZ6xz3POtlZ3VK3qQpUcP8fwXsKqabIViCPKsn753OLW23 lEa/1vPM1FmeX0xmH/e9lCajkOQiNFyRSGK/FezZzZs/VHQosS4D0EInQuySWOGO 9j42wsAPQyVDcIcsV9qXRY4yarxq0rpD9dnE8dFi4iKQxV8= Private-MAC: d619c293fe0ac660bff38d6c8db7d73736a51826","title":"Example file SSH Pem and SSH Putty"},{"location":"ubuntu/ssl/","text":"Overview \u00b6 This is our developer docs about Setup SSL for Magento site after install. Our docs includes: Create SSL Script generate certificate SSL for site Setup SSL for Magento site","title":"Overview"},{"location":"ubuntu/ssl/#overview","text":"This is our developer docs about Setup SSL for Magento site after install. Our docs includes: Create SSL Script generate certificate SSL for site Setup SSL for Magento site","title":"Overview"},{"location":"ubuntu/ssl/ssl_create/","text":"New SSL style \u00b6 Create ROOT CA \u00b6 openssl genrsa -des3 -out rootCA.key 2048 openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3658 -out rootCA.pem Create SSL \u00b6 Create file v3.ext authorityKeyIdentifier = keyid , issuer basicConstraints = CA : FALSE keyUsage = digitalSignature , nonRepudiation , keyEncipherment , dataEncipherment subjectAltName = @alt_names [ alt_names ] DNS .1 = x . o DNS .2 = * . x . o DNS .3 = localhost DNS .4 = localhost . com DNS .5 = * . localhost . com IP .1 = 127.0.0.1 IP .2 = 192.168.1.5 openssl req -new -nodes -out server.csr -newkey rsa:2048 -keyout server.key openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 3658 -sha256 -extfile v3.ext Add Trusted Certificate \u00b6 Install Root Cert OR sudo apt-get install libnss3-tools [ -d ~/.pki/nssdb ] || mkdir -p ~/.pki/nssdb certutil -d sql: $HOME /.pki/nssdb -A -n 'rootCA' -i rootCA.pem -t TCP,TCP,TCP","title":"Create SSL"},{"location":"ubuntu/ssl/ssl_create/#new-ssl-style","text":"","title":"New SSL style"},{"location":"ubuntu/ssl/ssl_create/#create-root-ca","text":"openssl genrsa -des3 -out rootCA.key 2048 openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3658 -out rootCA.pem","title":"Create ROOT CA"},{"location":"ubuntu/ssl/ssl_create/#create-ssl","text":"Create file v3.ext authorityKeyIdentifier = keyid , issuer basicConstraints = CA : FALSE keyUsage = digitalSignature , nonRepudiation , keyEncipherment , dataEncipherment subjectAltName = @alt_names [ alt_names ] DNS .1 = x . o DNS .2 = * . x . o DNS .3 = localhost DNS .4 = localhost . com DNS .5 = * . localhost . com IP .1 = 127.0.0.1 IP .2 = 192.168.1.5 openssl req -new -nodes -out server.csr -newkey rsa:2048 -keyout server.key openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 3658 -sha256 -extfile v3.ext","title":"Create SSL"},{"location":"ubuntu/ssl/ssl_create/#add-trusted-certificate","text":"Install Root Cert OR sudo apt-get install libnss3-tools [ -d ~/.pki/nssdb ] || mkdir -p ~/.pki/nssdb certutil -d sql: $HOME /.pki/nssdb -A -n 'rootCA' -i rootCA.pem -t TCP,TCP,TCP","title":"Add Trusted Certificate"},{"location":"ubuntu/ssl/ssl_magento_setup/","text":"Overview \u00b6 Setup SSL for Magento site after install Create site available for apache2 \u00b6 Copy ssl to apache2 sudo cp server.crt /etc/ssl/certs/ssl-cert-snakeoil.pem sudo cp server.key /etc/ssl/private/ssl-cert-snakeoil.key Create file /etc/apache2/sites-available/m223.conf <VirtualHost *:80> ServerName m223.com ServerAlias www.m223.com ServerAlias *.m223.com ServerAdmin magento@localhost DocumentRoot /var/www/html/ce223 ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined <Directory \"/var/www/html/ce223\"> Options Indexes FollowSymLinks MultiViews AllowOverride All </Directory> </VirtualHost> <VirtualHost _default_:443> ServerAdmin admin@example.com ServerName m223.com ServerAlias www.m223.com ServerAlias *.m223.com ServerAdmin magento@localhost DocumentRoot /var/www/html/ce223 ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined SSLEngine on SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key <Directory \"/var/www/html/ce223\"> Options Indexes FollowSymLinks MultiViews AllowOverride All </Directory> </VirtualHost> sudo a2ensite m223.conf sudo service apache2 reload Note \u00b6 View website https://magenticians.com/magento-ssl-configuration-issues-resolved/ to setup in mysql Mysql: In database in table 'core_config_data' set web/secure/use_in_frontend and web/secure/use_in_adminhtml = 1 Flush cache magento after ensite apache, Clear cache of browser. Clear the cache in both the cases by deleting /var/cache Error cannot call Rest API Magento Uncomment 2 line in file .htaccess in server magento: Ex: /var/www/html/ce223/.htaccess Options -MultiViews RewriteRule ^api/rest api.php?type=rest [QSA,L]","title":"SSL for Magento site"},{"location":"ubuntu/ssl/ssl_magento_setup/#overview","text":"Setup SSL for Magento site after install","title":"Overview"},{"location":"ubuntu/ssl/ssl_magento_setup/#create-site-available-for-apache2","text":"Copy ssl to apache2 sudo cp server.crt /etc/ssl/certs/ssl-cert-snakeoil.pem sudo cp server.key /etc/ssl/private/ssl-cert-snakeoil.key Create file /etc/apache2/sites-available/m223.conf <VirtualHost *:80> ServerName m223.com ServerAlias www.m223.com ServerAlias *.m223.com ServerAdmin magento@localhost DocumentRoot /var/www/html/ce223 ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined <Directory \"/var/www/html/ce223\"> Options Indexes FollowSymLinks MultiViews AllowOverride All </Directory> </VirtualHost> <VirtualHost _default_:443> ServerAdmin admin@example.com ServerName m223.com ServerAlias www.m223.com ServerAlias *.m223.com ServerAdmin magento@localhost DocumentRoot /var/www/html/ce223 ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined SSLEngine on SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key <Directory \"/var/www/html/ce223\"> Options Indexes FollowSymLinks MultiViews AllowOverride All </Directory> </VirtualHost> sudo a2ensite m223.conf sudo service apache2 reload","title":"Create site available for apache2"},{"location":"ubuntu/ssl/ssl_magento_setup/#note","text":"View website https://magenticians.com/magento-ssl-configuration-issues-resolved/ to setup in mysql Mysql: In database in table 'core_config_data' set web/secure/use_in_frontend and web/secure/use_in_adminhtml = 1 Flush cache magento after ensite apache, Clear cache of browser. Clear the cache in both the cases by deleting /var/cache Error cannot call Rest API Magento Uncomment 2 line in file .htaccess in server magento: Ex: /var/www/html/ce223/.htaccess Options -MultiViews RewriteRule ^api/rest api.php?type=rest [QSA,L]","title":"Note"}]}